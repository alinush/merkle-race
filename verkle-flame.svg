<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="4000" height="374" onload="init(evt)" viewBox="0 0 4000 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="3890" y="24.00">Search</text><text id="matched" x="3890" y="357.00"> </text><svg id="frames" x="10" width="3980" total_samples="9309"><g><title>merkle-race`core::ptr::drop_in_place&lt;merkle_race::merkle_abstract::AbstractMerkle&lt;alloc::string::String,merkle_race::verkle::VerkleComm&lt;merkle_race::verkle_ristretto::CompressedRistretto&gt;,merkle_race::verkle::VerkleHasher&lt;merkle_race::verkle_ristretto::RistrettoPoint,merkle_race::verkle_ristretto::VartimeRistrettoSubsetPrecomputation,merkle_race::verkle_ristretto::RistrettoBasepointTable&gt;&gt;&gt; (253 samples, 2.72%)</title><rect x="0.0000%" y="213" width="2.7178%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="253"/><text x="0.0750%" y="223.50">merkle-race`c..</text></g><g><title>libsystem_malloc.dylib`free_large (253 samples, 2.72%)</title><rect x="0.0000%" y="197" width="2.7178%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="253"/><text x="0.0750%" y="207.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (253 samples, 2.72%)</title><rect x="0.0000%" y="181" width="2.7178%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="253"/><text x="0.0750%" y="191.50">libsystem_mal..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (253 samples, 2.72%)</title><rect x="0.0000%" y="165" width="2.7178%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="253"/><text x="0.0750%" y="175.50">libsystem_ker..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="2.7178%" y="181" width="0.0107%" height="15" fill="rgb(208,68,35)" fg:x="253" fg:w="1"/><text x="2.7928%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="2.7178%" y="165" width="0.0107%" height="15" fill="rgb(232,128,0)" fg:x="253" fg:w="1"/><text x="2.7928%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="2.7178%" y="149" width="0.0107%" height="15" fill="rgb(207,160,47)" fg:x="253" fg:w="1"/><text x="2.7928%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="2.7393%" y="149" width="0.0107%" height="15" fill="rgb(228,23,34)" fg:x="255" fg:w="1"/><text x="2.8143%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="2.7393%" y="133" width="0.0107%" height="15" fill="rgb(218,30,26)" fg:x="255" fg:w="1"/><text x="2.8143%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="2.7500%" y="149" width="0.0107%" height="15" fill="rgb(220,122,19)" fg:x="256" fg:w="1"/><text x="2.8250%" y="159.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::compress (2 samples, 0.02%)</title><rect x="2.7608%" y="149" width="0.0215%" height="15" fill="rgb(250,228,42)" fg:x="257" fg:w="2"/><text x="2.8358%" y="159.50"></text></g><g><title>merkle-race`&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.06%)</title><rect x="2.7285%" y="181" width="0.0645%" height="15" fill="rgb(240,193,28)" fg:x="254" fg:w="6"/><text x="2.8035%" y="191.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle::VerkleHasher&lt;FastGroupElem,MultiscalarMulPrecomp,BasepointTable&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::verkle::VerkleComm&lt;SmallGroupElem&gt;&gt;&gt;::hash_leaf_data (6 samples, 0.06%)</title><rect x="2.7285%" y="165" width="0.0645%" height="15" fill="rgb(216,20,37)" fg:x="254" fg:w="6"/><text x="2.8035%" y="175.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::from_bytes_mod_order_wide (1 samples, 0.01%)</title><rect x="2.7823%" y="149" width="0.0107%" height="15" fill="rgb(206,188,39)" fg:x="259" fg:w="1"/><text x="2.8573%" y="159.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::scalar::Scalar52::montgomery_mul (1 samples, 0.01%)</title><rect x="2.7823%" y="133" width="0.0107%" height="15" fill="rgb(217,207,13)" fg:x="259" fg:w="1"/><text x="2.8573%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="2.8897%" y="165" width="0.0430%" height="15" fill="rgb(231,73,38)" fg:x="269" fg:w="4"/><text x="2.9647%" y="175.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (3 samples, 0.03%)</title><rect x="2.9326%" y="133" width="0.0322%" height="15" fill="rgb(225,20,46)" fg:x="273" fg:w="3"/><text x="3.0076%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="2.9649%" y="133" width="0.0107%" height="15" fill="rgb(210,31,41)" fg:x="276" fg:w="1"/><text x="3.0399%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="2.9649%" y="117" width="0.0107%" height="15" fill="rgb(221,200,47)" fg:x="276" fg:w="1"/><text x="3.0399%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (1 samples, 0.01%)</title><rect x="2.9756%" y="133" width="0.0107%" height="15" fill="rgb(226,26,5)" fg:x="277" fg:w="1"/><text x="3.0506%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="2.9971%" y="117" width="0.0107%" height="15" fill="rgb(249,33,26)" fg:x="279" fg:w="1"/><text x="3.0721%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 0.02%)</title><rect x="3.0293%" y="101" width="0.0215%" height="15" fill="rgb(235,183,28)" fg:x="282" fg:w="2"/><text x="3.1043%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::ristretto::CompressedRistretto::decompress (32 samples, 0.34%)</title><rect x="2.9864%" y="133" width="0.3438%" height="15" fill="rgb(221,5,38)" fg:x="278" fg:w="32"/><text x="3.0614%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (30 samples, 0.32%)</title><rect x="3.0078%" y="117" width="0.3223%" height="15" fill="rgb(247,18,42)" fg:x="280" fg:w="30"/><text x="3.0828%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (26 samples, 0.28%)</title><rect x="3.0508%" y="101" width="0.2793%" height="15" fill="rgb(241,131,45)" fg:x="284" fg:w="26"/><text x="3.1258%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="3.3301%" y="117" width="0.0107%" height="15" fill="rgb(249,31,29)" fg:x="310" fg:w="1"/><text x="3.4051%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.01%)</title><rect x="3.3409%" y="117" width="0.0107%" height="15" fill="rgb(225,111,53)" fg:x="311" fg:w="1"/><text x="3.4159%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="3.3516%" y="101" width="0.0107%" height="15" fill="rgb(238,160,17)" fg:x="312" fg:w="1"/><text x="3.4266%" y="111.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::CompressedRistretto as core::ops::arith::Add&lt;merkle_race::verkle_ristretto::RistrettoPoint&gt;&gt;::add (73 samples, 0.78%)</title><rect x="2.9326%" y="149" width="0.7842%" height="15" fill="rgb(214,148,48)" fg:x="273" fg:w="73"/><text x="3.0076%" y="159.50">me..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::compress (36 samples, 0.39%)</title><rect x="3.3301%" y="133" width="0.3867%" height="15" fill="rgb(232,36,49)" fg:x="310" fg:w="36"/><text x="3.4051%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (34 samples, 0.37%)</title><rect x="3.3516%" y="117" width="0.3652%" height="15" fill="rgb(209,103,24)" fg:x="312" fg:w="34"/><text x="3.4266%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (33 samples, 0.35%)</title><rect x="3.3623%" y="101" width="0.3545%" height="15" fill="rgb(229,88,8)" fg:x="313" fg:w="33"/><text x="3.4373%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (38 samples, 0.41%)</title><rect x="3.7168%" y="117" width="0.4082%" height="15" fill="rgb(213,181,19)" fg:x="346" fg:w="38"/><text x="3.7918%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (11 samples, 0.12%)</title><rect x="4.1573%" y="101" width="0.1182%" height="15" fill="rgb(254,191,54)" fg:x="387" fg:w="11"/><text x="4.2323%" y="111.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint as subtle::ConditionallySelectable&gt;::conditional_assign (15 samples, 0.16%)</title><rect x="4.2754%" y="101" width="0.1611%" height="15" fill="rgb(241,83,37)" fg:x="398" fg:w="15"/><text x="4.3504%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (1 samples, 0.01%)</title><rect x="4.4366%" y="101" width="0.0107%" height="15" fill="rgb(233,36,39)" fg:x="413" fg:w="1"/><text x="4.5116%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (8 samples, 0.09%)</title><rect x="4.4473%" y="101" width="0.0859%" height="15" fill="rgb(226,3,54)" fg:x="414" fg:w="8"/><text x="4.5223%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::to_radix_2w (1 samples, 0.01%)</title><rect x="4.5332%" y="101" width="0.0107%" height="15" fill="rgb(245,192,40)" fg:x="422" fg:w="1"/><text x="4.6082%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::window::LookupTable&lt;T&gt;::select (3 samples, 0.03%)</title><rect x="4.5440%" y="101" width="0.0322%" height="15" fill="rgb(238,167,29)" fg:x="423" fg:w="3"/><text x="4.6190%" y="111.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::edwards::EdwardsBasepointTable as curve25519_dalek::traits::BasepointTable&gt;::basepoint_mul (46 samples, 0.49%)</title><rect x="4.1250%" y="117" width="0.4941%" height="15" fill="rgb(232,182,51)" fg:x="384" fg:w="46"/><text x="4.2000%" y="127.50"></text></g><g><title>merkle-race`subtle::black_box (4 samples, 0.04%)</title><rect x="4.5762%" y="101" width="0.0430%" height="15" fill="rgb(231,60,39)" fg:x="426" fg:w="4"/><text x="4.6512%" y="111.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoBasepointTable as core::ops::arith::Mul&lt;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (86 samples, 0.92%)</title><rect x="3.7168%" y="149" width="0.9238%" height="15" fill="rgb(208,69,12)" fg:x="346" fg:w="86"/><text x="3.7918%" y="159.50">mer..</text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::ristretto::RistrettoBasepointTable as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (86 samples, 0.92%)</title><rect x="3.7168%" y="133" width="0.9238%" height="15" fill="rgb(235,93,37)" fg:x="346" fg:w="86"/><text x="3.7918%" y="143.50">mer..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (2 samples, 0.02%)</title><rect x="4.6192%" y="117" width="0.0215%" height="15" fill="rgb(213,116,39)" fg:x="430" fg:w="2"/><text x="4.6942%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="4.6407%" y="149" width="0.0107%" height="15" fill="rgb(222,207,29)" fg:x="432" fg:w="1"/><text x="4.7157%" y="159.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="4.6407%" y="133" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="432" fg:w="1"/><text x="4.7157%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="4.6407%" y="117" width="0.0107%" height="15" fill="rgb(218,138,4)" fg:x="432" fg:w="1"/><text x="4.7157%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle::VerkleHasher&lt;FastGroupElem,MultiscalarMulPrecomp,BasepointTable&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::verkle::VerkleComm&lt;SmallGroupElem&gt;&gt;&gt;::hash_nodes (162 samples, 1.74%)</title><rect x="2.9326%" y="165" width="1.7403%" height="15" fill="rgb(250,191,14)" fg:x="273" fg:w="162"/><text x="3.0076%" y="175.50">merkle-..</text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoPoint as curve25519_dalek::traits::Identity&gt;::identity (2 samples, 0.02%)</title><rect x="4.6514%" y="149" width="0.0215%" height="15" fill="rgb(239,60,40)" fg:x="433" fg:w="2"/><text x="4.7264%" y="159.50"></text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::preprocess_leaves (184 samples, 1.98%)</title><rect x="2.7178%" y="197" width="1.9766%" height="15" fill="rgb(206,27,48)" fg:x="253" fg:w="184"/><text x="2.7928%" y="207.50">merkle-ra..</text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue (177 samples, 1.90%)</title><rect x="2.7930%" y="181" width="1.9014%" height="15" fill="rgb(225,35,8)" fg:x="260" fg:w="177"/><text x="2.8680%" y="191.50">merkle-r..</text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child (2 samples, 0.02%)</title><rect x="4.6729%" y="165" width="0.0215%" height="15" fill="rgb(250,213,24)" fg:x="435" fg:w="2"/><text x="4.7479%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.26%)</title><rect x="4.8340%" y="165" width="0.2578%" height="15" fill="rgb(247,123,22)" fg:x="450" fg:w="24"/><text x="4.9090%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="5.1026%" y="149" width="0.0215%" height="15" fill="rgb(231,138,38)" fg:x="475" fg:w="2"/><text x="5.1776%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="5.1026%" y="133" width="0.0215%" height="15" fill="rgb(231,145,46)" fg:x="475" fg:w="2"/><text x="5.1776%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="5.1133%" y="117" width="0.0107%" height="15" fill="rgb(251,118,11)" fg:x="476" fg:w="1"/><text x="5.1883%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="5.1133%" y="101" width="0.0107%" height="15" fill="rgb(217,147,25)" fg:x="476" fg:w="1"/><text x="5.1883%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="5.1241%" y="149" width="0.0107%" height="15" fill="rgb(247,81,37)" fg:x="477" fg:w="1"/><text x="5.1991%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="5.1348%" y="149" width="0.0107%" height="15" fill="rgb(209,12,38)" fg:x="478" fg:w="1"/><text x="5.2098%" y="159.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (36 samples, 0.39%)</title><rect x="5.2208%" y="133" width="0.3867%" height="15" fill="rgb(227,1,9)" fg:x="486" fg:w="36"/><text x="5.2958%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_extended (1 samples, 0.01%)</title><rect x="5.6075%" y="133" width="0.0107%" height="15" fill="rgb(248,47,43)" fg:x="522" fg:w="1"/><text x="5.6825%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (1 samples, 0.01%)</title><rect x="5.6182%" y="133" width="0.0107%" height="15" fill="rgb(221,10,30)" fg:x="523" fg:w="1"/><text x="5.6932%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (3 samples, 0.03%)</title><rect x="5.6290%" y="133" width="0.0322%" height="15" fill="rgb(210,229,1)" fg:x="524" fg:w="3"/><text x="5.7040%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (6 samples, 0.06%)</title><rect x="5.6612%" y="133" width="0.0645%" height="15" fill="rgb(222,148,37)" fg:x="527" fg:w="6"/><text x="5.7362%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::backend::serial::scalar_mul::precomputed_straus::VartimePrecomputedSubsetStraus as curve25519_dalek::traits::VartimePrecomputedSubsetMultiscalarMul&gt;::vartime_subset_multiscalar_mul (58 samples, 0.62%)</title><rect x="5.1456%" y="149" width="0.6231%" height="15" fill="rgb(234,67,33)" fg:x="479" fg:w="58"/><text x="5.2206%" y="159.50">m..</text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::non_adjacent_form (4 samples, 0.04%)</title><rect x="5.7256%" y="133" width="0.0430%" height="15" fill="rgb(247,98,35)" fg:x="533" fg:w="4"/><text x="5.8006%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (19 samples, 0.20%)</title><rect x="5.7686%" y="133" width="0.2041%" height="15" fill="rgb(247,138,52)" fg:x="537" fg:w="19"/><text x="5.8436%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (4 samples, 0.04%)</title><rect x="5.9727%" y="117" width="0.0430%" height="15" fill="rgb(213,79,30)" fg:x="556" fg:w="4"/><text x="6.0477%" y="127.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.05%)</title><rect x="5.9727%" y="133" width="0.0537%" height="15" fill="rgb(246,177,23)" fg:x="556" fg:w="5"/><text x="6.0477%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (1 samples, 0.01%)</title><rect x="6.0157%" y="117" width="0.0107%" height="15" fill="rgb(230,62,27)" fg:x="560" fg:w="1"/><text x="6.0907%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (1 samples, 0.01%)</title><rect x="6.0157%" y="101" width="0.0107%" height="15" fill="rgb(216,154,8)" fg:x="560" fg:w="1"/><text x="6.0907%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (5 samples, 0.05%)</title><rect x="6.0264%" y="133" width="0.0537%" height="15" fill="rgb(244,35,45)" fg:x="561" fg:w="5"/><text x="6.1014%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (1 samples, 0.01%)</title><rect x="6.0801%" y="133" width="0.0107%" height="15" fill="rgb(251,115,12)" fg:x="566" fg:w="1"/><text x="6.1551%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.06%)</title><rect x="6.1124%" y="117" width="0.0645%" height="15" fill="rgb(240,54,50)" fg:x="569" fg:w="6"/><text x="6.1874%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (5 samples, 0.05%)</title><rect x="6.1768%" y="117" width="0.0537%" height="15" fill="rgb(233,84,52)" fg:x="575" fg:w="5"/><text x="6.2518%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (1 samples, 0.01%)</title><rect x="6.2305%" y="117" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="580" fg:w="1"/><text x="6.3055%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (11 samples, 0.12%)</title><rect x="6.3272%" y="101" width="0.1182%" height="15" fill="rgb(249,43,39)" fg:x="589" fg:w="11"/><text x="6.4022%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (169 samples, 1.82%)</title><rect x="6.4454%" y="101" width="1.8154%" height="15" fill="rgb(209,38,44)" fg:x="600" fg:w="169"/><text x="6.5204%" y="111.50">merkle-r..</text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (189 samples, 2.03%)</title><rect x="6.2413%" y="117" width="2.0303%" height="15" fill="rgb(236,212,23)" fg:x="581" fg:w="189"/><text x="6.3163%" y="127.50">merkle-ra..</text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (1 samples, 0.01%)</title><rect x="8.2608%" y="101" width="0.0107%" height="15" fill="rgb(242,79,21)" fg:x="769" fg:w="1"/><text x="8.3358%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::ristretto::CompressedRistretto::decompress (207 samples, 2.22%)</title><rect x="6.0909%" y="133" width="2.2237%" height="15" fill="rgb(211,96,35)" fg:x="567" fg:w="207"/><text x="6.1659%" y="143.50">merkle-rac..</text></g><g><title>merkle-race`subtle::black_box (4 samples, 0.04%)</title><rect x="8.2716%" y="117" width="0.0430%" height="15" fill="rgb(253,215,40)" fg:x="770" fg:w="4"/><text x="8.3466%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (4 samples, 0.04%)</title><rect x="8.3145%" y="117" width="0.0430%" height="15" fill="rgb(211,81,21)" fg:x="774" fg:w="4"/><text x="8.3895%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (6 samples, 0.06%)</title><rect x="8.3575%" y="117" width="0.0645%" height="15" fill="rgb(208,190,38)" fg:x="778" fg:w="6"/><text x="8.4325%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (2 samples, 0.02%)</title><rect x="8.4220%" y="117" width="0.0215%" height="15" fill="rgb(235,213,38)" fg:x="784" fg:w="2"/><text x="8.4970%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (8 samples, 0.09%)</title><rect x="8.5079%" y="101" width="0.0859%" height="15" fill="rgb(237,122,38)" fg:x="792" fg:w="8"/><text x="8.5829%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (180 samples, 1.93%)</title><rect x="8.4434%" y="117" width="1.9336%" height="15" fill="rgb(244,218,35)" fg:x="786" fg:w="180"/><text x="8.5184%" y="127.50">merkle-r..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (166 samples, 1.78%)</title><rect x="8.5938%" y="101" width="1.7832%" height="15" fill="rgb(240,68,47)" fg:x="800" fg:w="166"/><text x="8.6688%" y="111.50">merkle-r..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::compress (194 samples, 2.08%)</title><rect x="8.3145%" y="133" width="2.0840%" height="15" fill="rgb(210,16,53)" fg:x="774" fg:w="194"/><text x="8.3895%" y="143.50">merkle-ra..</text></g><g><title>merkle-race`subtle::black_box (2 samples, 0.02%)</title><rect x="10.3771%" y="117" width="0.0215%" height="15" fill="rgb(235,124,12)" fg:x="966" fg:w="2"/><text x="10.4521%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::CompressedRistretto as core::ops::arith::Add&lt;merkle_race::verkle_ristretto::RistrettoPoint&gt;&gt;::add (433 samples, 4.65%)</title><rect x="5.7686%" y="149" width="4.6514%" height="15" fill="rgb(224,169,11)" fg:x="537" fg:w="433"/><text x="5.8436%" y="159.50">merkle-race`&lt;merkle_race..</text></g><g><title>merkle-race`subtle::black_box (2 samples, 0.02%)</title><rect x="10.3985%" y="133" width="0.0215%" height="15" fill="rgb(250,166,2)" fg:x="968" fg:w="2"/><text x="10.4735%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (203 samples, 2.18%)</title><rect x="10.4200%" y="117" width="2.1807%" height="15" fill="rgb(242,216,29)" fg:x="970" fg:w="203"/><text x="10.4950%" y="127.50">merkle-rac..</text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (140 samples, 1.50%)</title><rect x="12.7511%" y="101" width="1.5039%" height="15" fill="rgb(230,116,27)" fg:x="1187" fg:w="140"/><text x="12.8261%" y="111.50">merkle..</text></g><g><title>merkle-race`&lt;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint as subtle::ConditionallySelectable&gt;::conditional_assign (112 samples, 1.20%)</title><rect x="14.2550%" y="101" width="1.2031%" height="15" fill="rgb(228,99,48)" fg:x="1327" fg:w="112"/><text x="14.3300%" y="111.50">merk..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (2 samples, 0.02%)</title><rect x="15.4582%" y="101" width="0.0215%" height="15" fill="rgb(253,11,6)" fg:x="1439" fg:w="2"/><text x="15.5332%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (29 samples, 0.31%)</title><rect x="15.4796%" y="101" width="0.3115%" height="15" fill="rgb(247,143,39)" fg:x="1441" fg:w="29"/><text x="15.5546%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (9 samples, 0.10%)</title><rect x="15.7912%" y="101" width="0.0967%" height="15" fill="rgb(236,97,10)" fg:x="1470" fg:w="9"/><text x="15.8662%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::to_radix_2w (2 samples, 0.02%)</title><rect x="15.8879%" y="101" width="0.0215%" height="15" fill="rgb(233,208,19)" fg:x="1479" fg:w="2"/><text x="15.9629%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::window::LookupTable&lt;T&gt;::select (34 samples, 0.37%)</title><rect x="15.9093%" y="101" width="0.3652%" height="15" fill="rgb(216,164,2)" fg:x="1481" fg:w="34"/><text x="15.9843%" y="111.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::edwards::EdwardsBasepointTable as curve25519_dalek::traits::BasepointTable&gt;::basepoint_mul (349 samples, 3.75%)</title><rect x="12.6007%" y="117" width="3.7491%" height="15" fill="rgb(220,129,5)" fg:x="1173" fg:w="349"/><text x="12.6757%" y="127.50">merkle-race`&lt;curve2..</text></g><g><title>merkle-race`subtle::black_box (7 samples, 0.08%)</title><rect x="16.2746%" y="101" width="0.0752%" height="15" fill="rgb(242,17,10)" fg:x="1515" fg:w="7"/><text x="16.3496%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (10 samples, 0.11%)</title><rect x="16.3498%" y="117" width="0.1074%" height="15" fill="rgb(242,107,0)" fg:x="1522" fg:w="10"/><text x="16.4248%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::to_radix_16 (4 samples, 0.04%)</title><rect x="16.4572%" y="117" width="0.0430%" height="15" fill="rgb(251,28,31)" fg:x="1532" fg:w="4"/><text x="16.5322%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoBasepointTable as core::ops::arith::Mul&lt;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (569 samples, 6.11%)</title><rect x="10.4200%" y="149" width="6.1124%" height="15" fill="rgb(233,223,10)" fg:x="970" fg:w="569"/><text x="10.4950%" y="159.50">merkle-race`&lt;merkle_race::verkle..</text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::ristretto::RistrettoBasepointTable as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (569 samples, 6.11%)</title><rect x="10.4200%" y="133" width="6.1124%" height="15" fill="rgb(215,21,27)" fg:x="970" fg:w="569"/><text x="10.4950%" y="143.50">merkle-race`&lt;&amp;curve25519_dalek::..</text></g><g><title>merkle-race`curve25519_dalek::window::LookupTable&lt;T&gt;::select (3 samples, 0.03%)</title><rect x="16.5002%" y="117" width="0.0322%" height="15" fill="rgb(232,23,21)" fg:x="1536" fg:w="3"/><text x="16.5752%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.05%)</title><rect x="16.5324%" y="149" width="0.0537%" height="15" fill="rgb(244,5,23)" fg:x="1539" fg:w="5"/><text x="16.6074%" y="159.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.05%)</title><rect x="16.5324%" y="133" width="0.0537%" height="15" fill="rgb(226,81,46)" fg:x="1539" fg:w="5"/><text x="16.6074%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="16.5324%" y="117" width="0.0537%" height="15" fill="rgb(247,70,30)" fg:x="1539" fg:w="5"/><text x="16.6074%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoPoint as curve25519_dalek::traits::Identity&gt;::identity (1 samples, 0.01%)</title><rect x="16.5861%" y="149" width="0.0107%" height="15" fill="rgb(212,68,19)" fg:x="1544" fg:w="1"/><text x="16.6611%" y="159.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::CompletedPoint::to_projective (2 samples, 0.02%)</title><rect x="16.5968%" y="149" width="0.0215%" height="15" fill="rgb(240,187,13)" fg:x="1545" fg:w="2"/><text x="16.6718%" y="159.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::ProjectivePoint::double (1 samples, 0.01%)</title><rect x="16.6183%" y="149" width="0.0107%" height="15" fill="rgb(223,113,26)" fg:x="1547" fg:w="1"/><text x="16.6933%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="16.6291%" y="133" width="0.0107%" height="15" fill="rgb(206,192,2)" fg:x="1548" fg:w="1"/><text x="16.7041%" y="143.50"></text></g><g><title>merkle-race`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (2 samples, 0.02%)</title><rect x="16.6398%" y="117" width="0.0215%" height="15" fill="rgb(241,108,4)" fg:x="1549" fg:w="2"/><text x="16.7148%" y="127.50"></text></g><g><title>merkle-race`bincode::internal::serialize (7 samples, 0.08%)</title><rect x="16.6398%" y="133" width="0.0752%" height="15" fill="rgb(247,173,49)" fg:x="1549" fg:w="7"/><text x="16.7148%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::CompressedRistretto as serde::ser::Serialize&gt;::serialize (5 samples, 0.05%)</title><rect x="16.6613%" y="117" width="0.0537%" height="15" fill="rgb(224,114,35)" fg:x="1551" fg:w="5"/><text x="16.7363%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (2 samples, 0.02%)</title><rect x="16.6935%" y="101" width="0.0215%" height="15" fill="rgb(245,159,27)" fg:x="1554" fg:w="2"/><text x="16.7685%" y="111.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::finalize_with_flag (1 samples, 0.01%)</title><rect x="16.7150%" y="133" width="0.0107%" height="15" fill="rgb(245,172,44)" fg:x="1556" fg:w="1"/><text x="16.7900%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::from_bytes_mod_order_wide (1 samples, 0.01%)</title><rect x="16.7257%" y="133" width="0.0107%" height="15" fill="rgb(236,23,11)" fg:x="1557" fg:w="1"/><text x="16.8007%" y="143.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::compress (10 samples, 0.11%)</title><rect x="16.7472%" y="117" width="0.1074%" height="15" fill="rgb(205,117,38)" fg:x="1559" fg:w="10"/><text x="16.8222%" y="127.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::new_with_params (1 samples, 0.01%)</title><rect x="16.8547%" y="117" width="0.0107%" height="15" fill="rgb(237,72,25)" fg:x="1569" fg:w="1"/><text x="16.9297%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::from_bytes_mod_order_wide (4 samples, 0.04%)</title><rect x="16.8654%" y="117" width="0.0430%" height="15" fill="rgb(244,70,9)" fg:x="1570" fg:w="4"/><text x="16.9404%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::scalar::Scalar52::montgomery_mul (4 samples, 0.04%)</title><rect x="16.8654%" y="101" width="0.0430%" height="15" fill="rgb(217,125,39)" fg:x="1570" fg:w="4"/><text x="16.9404%" y="111.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle::VerkleHasher&lt;FastGroupElem,MultiscalarMulPrecomp,BasepointTable&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::verkle::VerkleComm&lt;SmallGroupElem&gt;&gt;&gt;::hash_nodes (1,101 samples, 11.83%)</title><rect x="5.0918%" y="165" width="11.8273%" height="15" fill="rgb(235,36,10)" fg:x="474" fg:w="1101"/><text x="5.1668%" y="175.50">merkle-race`&lt;merkle_race::verkle::VerkleHasher&lt;FastGroupElem,Mul..</text></g><g><title>merkle-race`merkle_race::verkle::hash_to_scalar (27 samples, 0.29%)</title><rect x="16.6291%" y="149" width="0.2900%" height="15" fill="rgb(251,123,47)" fg:x="1548" fg:w="27"/><text x="16.7041%" y="159.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::Scalar::hash_from_bytes (17 samples, 0.18%)</title><rect x="16.7365%" y="133" width="0.1826%" height="15" fill="rgb(221,13,13)" fg:x="1558" fg:w="17"/><text x="16.8115%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::scalar::_&lt;impl curve25519_dalek::backend::serial::u64::scalar::Scalar52&gt;::pack (1 samples, 0.01%)</title><rect x="16.9084%" y="117" width="0.0107%" height="15" fill="rgb(238,131,9)" fg:x="1574" fg:w="1"/><text x="16.9834%" y="127.50"></text></g><g><title>merkle-race`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="16.9191%" y="165" width="0.0107%" height="15" fill="rgb(211,50,8)" fg:x="1575" fg:w="1"/><text x="16.9941%" y="175.50"></text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::update_preprocessed_leaves (1,143 samples, 12.28%)</title><rect x="4.6944%" y="197" width="12.2784%" height="15" fill="rgb(245,182,24)" fg:x="437" fg:w="1143"/><text x="4.7694%" y="207.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataTy..</text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue (1,143 samples, 12.28%)</title><rect x="4.6944%" y="181" width="12.2784%" height="15" fill="rgb(242,14,37)" fg:x="437" fg:w="1143"/><text x="4.7694%" y="191.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataTy..</text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child (4 samples, 0.04%)</title><rect x="16.9299%" y="165" width="0.0430%" height="15" fill="rgb(246,228,12)" fg:x="1576" fg:w="4"/><text x="17.0049%" y="175.50"></text></g><g><title>merkle-race`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="16.9728%" y="165" width="0.0107%" height="15" fill="rgb(213,55,15)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="175.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="16.9728%" y="149" width="0.0107%" height="15" fill="rgb(209,9,3)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="159.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="16.9728%" y="133" width="0.0107%" height="15" fill="rgb(230,59,30)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="16.9728%" y="117" width="0.0107%" height="15" fill="rgb(209,121,21)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="16.9728%" y="101" width="0.0107%" height="15" fill="rgb(220,109,13)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="16.9728%" y="85" width="0.0107%" height="15" fill="rgb(232,18,1)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="16.9728%" y="69" width="0.0107%" height="15" fill="rgb(215,41,42)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="16.9728%" y="53" width="0.0107%" height="15" fill="rgb(224,123,36)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="16.9728%" y="37" width="0.0107%" height="15" fill="rgb(240,125,3)" fg:x="1580" fg:w="1"/><text x="17.0478%" y="47.50"></text></g><g><title>merkle-race`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="16.9728%" y="181" width="0.0215%" height="15" fill="rgb(205,98,50)" fg:x="1580" fg:w="2"/><text x="17.0478%" y="191.50"></text></g><g><title>merkle-race`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="16.9836%" y="165" width="0.0107%" height="15" fill="rgb(205,185,37)" fg:x="1581" fg:w="1"/><text x="17.0586%" y="175.50"></text></g><g><title>merkle-race`alloc::slice::merge_sort (1 samples, 0.01%)</title><rect x="16.9943%" y="165" width="0.0107%" height="15" fill="rgb(238,207,15)" fg:x="1582" fg:w="1"/><text x="17.0693%" y="175.50"></text></g><g><title>merkle-race`rand::rng::Rng::gen_range (446 samples, 4.79%)</title><rect x="17.0050%" y="165" width="4.7911%" height="15" fill="rgb(213,199,42)" fg:x="1583" fg:w="446"/><text x="17.0800%" y="175.50">merkle-race`rand::rng::Rn..</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3,168 samples, 34.03%)</title><rect x="25.4377%" y="149" width="34.0316%" height="15" fill="rgb(235,201,11)" fg:x="2368" fg:w="3168"/><text x="25.5127%" y="159.50">merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (14 samples, 0.15%)</title><rect x="82.4901%" y="133" width="0.1504%" height="15" fill="rgb(207,46,11)" fg:x="7679" fg:w="14"/><text x="82.5651%" y="143.50"></text></g><g><title>merkle-race`rand::rng::Rng::gen_range (2,182 samples, 23.44%)</title><rect x="59.4693%" y="149" width="23.4397%" height="15" fill="rgb(241,35,35)" fg:x="5536" fg:w="2182"/><text x="59.5443%" y="159.50">merkle-race`rand::rng::Rng::gen_range</text></g><g><title>merkle-race`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (25 samples, 0.27%)</title><rect x="82.6405%" y="133" width="0.2686%" height="15" fill="rgb(243,32,47)" fg:x="7693" fg:w="25"/><text x="82.7155%" y="143.50"></text></g><g><title>merkle-race`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (25 samples, 0.27%)</title><rect x="82.6405%" y="117" width="0.2686%" height="15" fill="rgb(247,202,23)" fg:x="7693" fg:w="25"/><text x="82.7155%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (25 samples, 0.27%)</title><rect x="82.6405%" y="101" width="0.2686%" height="15" fill="rgb(219,102,11)" fg:x="7693" fg:w="25"/><text x="82.7155%" y="111.50"></text></g><g><title>merkle-race`merkle_race::bench_merkle (7,467 samples, 80.21%)</title><rect x="2.7178%" y="213" width="80.2127%" height="15" fill="rgb(243,110,44)" fg:x="253" fg:w="7467"/><text x="2.7928%" y="223.50">merkle-race`merkle_race::bench_merkle</text></g><g><title>merkle-race`merkle_race::random_updates (6,140 samples, 65.96%)</title><rect x="16.9728%" y="197" width="65.9577%" height="15" fill="rgb(222,74,54)" fg:x="1580" fg:w="6140"/><text x="17.0478%" y="207.50">merkle-race`merkle_race::random_updates</text></g><g><title>merkle-race`merkle_race::random_leaf_positions (6,138 samples, 65.94%)</title><rect x="16.9943%" y="181" width="65.9362%" height="15" fill="rgb(216,99,12)" fg:x="1582" fg:w="6138"/><text x="17.0693%" y="191.50">merkle-race`merkle_race::random_leaf_positions</text></g><g><title>merkle-race`rand::seq::IteratorRandom::choose_multiple (5,691 samples, 61.13%)</title><rect x="21.7961%" y="165" width="61.1344%" height="15" fill="rgb(226,22,26)" fg:x="2029" fg:w="5691"/><text x="21.8711%" y="175.50">merkle-race`rand::seq::IteratorRandom::choose_multiple</text></g><g><title>merkle-race`rand::rngs::adapter::reseeding::fork::get_fork_counter (2 samples, 0.02%)</title><rect x="82.9090%" y="149" width="0.0215%" height="15" fill="rgb(217,163,10)" fg:x="7718" fg:w="2"/><text x="82.9840%" y="159.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::window::NafLookupTable8&lt;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; as core::convert::From&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::from (4 samples, 0.04%)</title><rect x="82.9305%" y="181" width="0.0430%" height="15" fill="rgb(213,25,53)" fg:x="7720" fg:w="4"/><text x="83.0055%" y="191.50"></text></g><g><title>merkle-race`curve25519_dalek::edwards::EdwardsPoint::to_affine_niels (4 samples, 0.04%)</title><rect x="82.9305%" y="165" width="0.0430%" height="15" fill="rgb(252,105,26)" fg:x="7720" fg:w="4"/><text x="83.0055%" y="175.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (4 samples, 0.04%)</title><rect x="82.9305%" y="149" width="0.0430%" height="15" fill="rgb(220,39,43)" fg:x="7720" fg:w="4"/><text x="83.0055%" y="159.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.01%)</title><rect x="82.9735%" y="117" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="7724" fg:w="1"/><text x="83.0485%" y="127.50"></text></g><g><title>merkle-race`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (18 samples, 0.19%)</title><rect x="82.9305%" y="197" width="0.1934%" height="15" fill="rgb(252,8,32)" fg:x="7720" fg:w="18"/><text x="83.0055%" y="207.50"></text></g><g><title>merkle-race`&lt;merkle_race::verkle_ristretto::RistrettoBasepointTable as merkle_race::verkle_ristretto::CreateFromPoint&gt;::create (14 samples, 0.15%)</title><rect x="82.9735%" y="181" width="0.1504%" height="15" fill="rgb(223,20,43)" fg:x="7724" fg:w="14"/><text x="83.0485%" y="191.50"></text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoBasepointTable::create (14 samples, 0.15%)</title><rect x="82.9735%" y="165" width="0.1504%" height="15" fill="rgb(229,81,49)" fg:x="7724" fg:w="14"/><text x="83.0485%" y="175.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::edwards::EdwardsBasepointTable as curve25519_dalek::traits::BasepointTable&gt;::create (14 samples, 0.15%)</title><rect x="82.9735%" y="149" width="0.1504%" height="15" fill="rgb(236,28,36)" fg:x="7724" fg:w="14"/><text x="83.0485%" y="159.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::window::LookupTable&lt;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; as core::convert::From&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::from (14 samples, 0.15%)</title><rect x="82.9735%" y="133" width="0.1504%" height="15" fill="rgb(249,185,26)" fg:x="7724" fg:w="14"/><text x="83.0485%" y="143.50"></text></g><g><title>merkle-race`curve25519_dalek::edwards::EdwardsPoint::to_affine_niels (13 samples, 0.14%)</title><rect x="82.9842%" y="117" width="0.1396%" height="15" fill="rgb(249,174,33)" fg:x="7725" fg:w="13"/><text x="83.0592%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (13 samples, 0.14%)</title><rect x="82.9842%" y="101" width="0.1396%" height="15" fill="rgb(233,201,37)" fg:x="7725" fg:w="13"/><text x="83.0592%" y="111.50"></text></g><g><title>all (9,309 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="335.50"></text></g><g><title>dyld`start (9,309 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="319.50">dyld`start</text></g><g><title>merkle-race`main (9,309 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="303.50">merkle-race`main</text></g><g><title>merkle-race`std::rt::lang_start_internal (9,309 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="287.50">merkle-race`std::rt::lang_start_internal</text></g><g><title>merkle-race`std::rt::lang_start::_{{closure}} (9,309 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="271.50">merkle-race`std::rt::lang_start::_{{closure}}</text></g><g><title>merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace (9,309 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="255.50">merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>merkle-race`merkle_race::main (9,309 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="9309"/><text x="0.0750%" y="239.50">merkle-race`merkle_race::main</text></g><g><title>merkle-race`merkle_race::verkle::new_verkle_from_leaves (1,589 samples, 17.07%)</title><rect x="82.9305%" y="213" width="17.0695%" height="15" fill="rgb(219,56,2)" fg:x="7720" fg:w="1589"/><text x="83.0055%" y="223.50">merkle-race`merkle_race::verkle::new_verkle_from_leaves</text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_num_leaves (1,571 samples, 16.88%)</title><rect x="83.1239%" y="197" width="16.8761%" height="15" fill="rgb(233,0,4)" fg:x="7738" fg:w="1571"/><text x="83.1989%" y="207.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_..</text></g><g><title>merkle-race`alloc::vec::from_elem (1,571 samples, 16.88%)</title><rect x="83.1239%" y="181" width="16.8761%" height="15" fill="rgb(235,30,7)" fg:x="7738" fg:w="1571"/><text x="83.1989%" y="191.50">merkle-race`alloc::vec::from_elem</text></g><g><title>merkle-race`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,571 samples, 16.88%)</title><rect x="83.1239%" y="165" width="16.8761%" height="15" fill="rgb(250,79,13)" fg:x="7738" fg:w="1571"/><text x="83.1989%" y="175.50">merkle-race`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="99.9893%" y="149" width="0.0107%" height="15" fill="rgb(211,146,34)" fg:x="9308" fg:w="1"/><text x="100.0643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="99.9893%" y="133" width="0.0107%" height="15" fill="rgb(228,22,38)" fg:x="9308" fg:w="1"/><text x="100.0643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.01%)</title><rect x="99.9893%" y="117" width="0.0107%" height="15" fill="rgb(235,168,5)" fg:x="9308" fg:w="1"/><text x="100.0643%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.01%)</title><rect x="99.9893%" y="101" width="0.0107%" height="15" fill="rgb(221,155,16)" fg:x="9308" fg:w="1"/><text x="100.0643%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="99.9893%" y="85" width="0.0107%" height="15" fill="rgb(215,215,53)" fg:x="9308" fg:w="1"/><text x="100.0643%" y="95.50"></text></g></svg></svg>