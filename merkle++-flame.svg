<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="4000" height="342" onload="init(evt)" viewBox="0 0 4000 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="3890" y="24.00">Search</text><text id="matched" x="3890" y="325.00"> </text><svg id="frames" x="10" width="3980" total_samples="9960"><g><title>libsystem_malloc.dylib`free_large (260 samples, 2.61%)</title><rect x="0.0000%" y="181" width="2.6104%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="260"/><text x="0.0750%" y="191.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (260 samples, 2.61%)</title><rect x="0.0000%" y="165" width="2.6104%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="260"/><text x="0.0750%" y="175.50">libsystem_ma..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (260 samples, 2.61%)</title><rect x="0.0000%" y="149" width="2.6104%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="260"/><text x="0.0750%" y="159.50">libsystem_ke..</text></g><g><title>merkle-race`clap::build::command::App::get_matches_from (1 samples, 0.01%)</title><rect x="2.6104%" y="181" width="0.0100%" height="15" fill="rgb(248,212,6)" fg:x="260" fg:w="1"/><text x="2.6854%" y="191.50"></text></g><g><title>merkle-race`clap::build::command::App::_do_parse (1 samples, 0.01%)</title><rect x="2.6104%" y="165" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="260" fg:w="1"/><text x="2.6854%" y="175.50"></text></g><g><title>merkle-race`clap::parse::parser::Parser::get_matches_with (1 samples, 0.01%)</title><rect x="2.6104%" y="149" width="0.0100%" height="15" fill="rgb(232,128,0)" fg:x="260" fg:w="1"/><text x="2.6854%" y="159.50"></text></g><g><title>merkle-race`clap::parse::parser::Parser::parse_opt (1 samples, 0.01%)</title><rect x="2.6104%" y="133" width="0.0100%" height="15" fill="rgb(207,160,47)" fg:x="260" fg:w="1"/><text x="2.6854%" y="143.50"></text></g><g><title>merkle-race`clap::parse::parser::Parser::inc_occurrence_of_arg (1 samples, 0.01%)</title><rect x="2.6104%" y="117" width="0.0100%" height="15" fill="rgb(228,23,34)" fg:x="260" fg:w="1"/><text x="2.6854%" y="127.50"></text></g><g><title>merkle-race`&lt;merkle_race::merkle_pp::IncrementalHasher&lt;FastIncHash&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_pp::MerkleppHashValue&lt;IncHash&gt;&gt;&gt;::hash_leaf_data (2 samples, 0.02%)</title><rect x="2.6205%" y="149" width="0.0201%" height="15" fill="rgb(218,30,26)" fg:x="261" fg:w="2"/><text x="2.6955%" y="159.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::compress (2 samples, 0.02%)</title><rect x="2.6205%" y="133" width="0.0201%" height="15" fill="rgb(220,122,19)" fg:x="261" fg:w="2"/><text x="2.6955%" y="143.50"></text></g><g><title>merkle-race`&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="2.6205%" y="165" width="0.0301%" height="15" fill="rgb(250,228,42)" fg:x="261" fg:w="3"/><text x="2.6955%" y="175.50"></text></g><g><title>merkle-race`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="2.6406%" y="149" width="0.0100%" height="15" fill="rgb(240,193,28)" fg:x="263" fg:w="1"/><text x="2.7156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="2.7410%" y="117" width="0.0100%" height="15" fill="rgb(216,20,37)" fg:x="273" fg:w="1"/><text x="2.8160%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="2.7510%" y="37" width="0.0100%" height="15" fill="rgb(206,188,39)" fg:x="274" fg:w="1"/><text x="2.8260%" y="47.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="2.7510%" y="117" width="0.0201%" height="15" fill="rgb(217,207,13)" fg:x="274" fg:w="2"/><text x="2.8260%" y="127.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="2.7510%" y="101" width="0.0201%" height="15" fill="rgb(231,73,38)" fg:x="274" fg:w="2"/><text x="2.8260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="2.7510%" y="85" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="274" fg:w="2"/><text x="2.8260%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="2.7510%" y="69" width="0.0201%" height="15" fill="rgb(210,31,41)" fg:x="274" fg:w="2"/><text x="2.8260%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="2.7510%" y="53" width="0.0201%" height="15" fill="rgb(221,200,47)" fg:x="274" fg:w="2"/><text x="2.8260%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="2.7610%" y="37" width="0.0100%" height="15" fill="rgb(226,26,5)" fg:x="275" fg:w="1"/><text x="2.8360%" y="47.50"></text></g><g><title>merkle-race`bincode::internal::serialize (3 samples, 0.03%)</title><rect x="2.7711%" y="117" width="0.0301%" height="15" fill="rgb(249,33,26)" fg:x="276" fg:w="3"/><text x="2.8461%" y="127.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::CompressedRistretto as serde::ser::Serialize&gt;::serialize (3 samples, 0.03%)</title><rect x="2.7711%" y="101" width="0.0301%" height="15" fill="rgb(235,183,28)" fg:x="276" fg:w="3"/><text x="2.8461%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (1 samples, 0.01%)</title><rect x="2.7912%" y="85" width="0.0100%" height="15" fill="rgb(221,5,38)" fg:x="278" fg:w="1"/><text x="2.8662%" y="95.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::compress (2 samples, 0.02%)</title><rect x="2.8112%" y="101" width="0.0201%" height="15" fill="rgb(247,18,42)" fg:x="280" fg:w="2"/><text x="2.8862%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.06%)</title><rect x="2.8313%" y="85" width="0.0602%" height="15" fill="rgb(241,131,45)" fg:x="282" fg:w="6"/><text x="2.9063%" y="95.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (2 samples, 0.02%)</title><rect x="2.8916%" y="85" width="0.0201%" height="15" fill="rgb(249,31,29)" fg:x="288" fg:w="2"/><text x="2.9666%" y="95.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 0.02%)</title><rect x="2.8916%" y="69" width="0.0201%" height="15" fill="rgb(225,111,53)" fg:x="288" fg:w="2"/><text x="2.9666%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="2.9317%" y="69" width="0.0502%" height="15" fill="rgb(238,160,17)" fg:x="292" fg:w="5"/><text x="3.0067%" y="79.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.01%)</title><rect x="2.9819%" y="69" width="0.0100%" height="15" fill="rgb(214,148,48)" fg:x="297" fg:w="1"/><text x="3.0569%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (8 samples, 0.08%)</title><rect x="3.0924%" y="53" width="0.0803%" height="15" fill="rgb(232,36,49)" fg:x="308" fg:w="8"/><text x="3.1674%" y="63.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (124 samples, 1.24%)</title><rect x="2.9920%" y="69" width="1.2450%" height="15" fill="rgb(209,103,24)" fg:x="298" fg:w="124"/><text x="3.0670%" y="79.50">merkl..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (106 samples, 1.06%)</title><rect x="3.1727%" y="53" width="1.0643%" height="15" fill="rgb(229,88,8)" fg:x="316" fg:w="106"/><text x="3.2477%" y="63.50">merk..</text></g><g><title>merkle-race`merkle_race::merkle_pp::hash_child (151 samples, 1.52%)</title><rect x="2.7410%" y="133" width="1.5161%" height="15" fill="rgb(213,181,19)" fg:x="273" fg:w="151"/><text x="2.8160%" y="143.50">merkle..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::hash_from_bytes (145 samples, 1.46%)</title><rect x="2.8012%" y="117" width="1.4558%" height="15" fill="rgb(254,191,54)" fg:x="279" fg:w="145"/><text x="2.8762%" y="127.50">merkle..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::from_uniform_bytes (142 samples, 1.43%)</title><rect x="2.8313%" y="101" width="1.4257%" height="15" fill="rgb(241,83,37)" fg:x="282" fg:w="142"/><text x="2.9063%" y="111.50">merkle..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::elligator_ristretto_flavor (134 samples, 1.35%)</title><rect x="2.9116%" y="85" width="1.3454%" height="15" fill="rgb(233,36,39)" fg:x="290" fg:w="134"/><text x="2.9866%" y="95.50">merkl..</text></g><g><title>merkle-race`subtle::black_box (2 samples, 0.02%)</title><rect x="4.2369%" y="69" width="0.0201%" height="15" fill="rgb(226,3,54)" fg:x="422" fg:w="2"/><text x="4.3119%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (3 samples, 0.03%)</title><rect x="4.2570%" y="117" width="0.0301%" height="15" fill="rgb(245,192,40)" fg:x="424" fg:w="3"/><text x="4.3320%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="4.2871%" y="101" width="0.0100%" height="15" fill="rgb(238,167,29)" fg:x="427" fg:w="1"/><text x="4.3621%" y="111.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="4.2871%" y="117" width="0.0201%" height="15" fill="rgb(232,182,51)" fg:x="427" fg:w="2"/><text x="4.3621%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (1 samples, 0.01%)</title><rect x="4.2972%" y="101" width="0.0100%" height="15" fill="rgb(231,60,39)" fg:x="428" fg:w="1"/><text x="4.3722%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="4.2972%" y="85" width="0.0100%" height="15" fill="rgb(208,69,12)" fg:x="428" fg:w="1"/><text x="4.3722%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.01%)</title><rect x="4.3072%" y="117" width="0.0100%" height="15" fill="rgb(235,93,37)" fg:x="429" fg:w="1"/><text x="4.3822%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (4 samples, 0.04%)</title><rect x="4.3173%" y="101" width="0.0402%" height="15" fill="rgb(213,116,39)" fg:x="430" fg:w="4"/><text x="4.3923%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (1 samples, 0.01%)</title><rect x="4.3574%" y="101" width="0.0100%" height="15" fill="rgb(222,207,29)" fg:x="434" fg:w="1"/><text x="4.4324%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 0.02%)</title><rect x="4.3775%" y="85" width="0.0201%" height="15" fill="rgb(206,96,30)" fg:x="436" fg:w="2"/><text x="4.4525%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (33 samples, 0.33%)</title><rect x="4.3675%" y="101" width="0.3313%" height="15" fill="rgb(218,138,4)" fg:x="435" fg:w="33"/><text x="4.4425%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (30 samples, 0.30%)</title><rect x="4.3976%" y="85" width="0.3012%" height="15" fill="rgb(250,191,14)" fg:x="438" fg:w="30"/><text x="4.4726%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::ristretto::CompressedRistretto::decompress (39 samples, 0.39%)</title><rect x="4.3173%" y="117" width="0.3916%" height="15" fill="rgb(239,60,40)" fg:x="430" fg:w="39"/><text x="4.3923%" y="127.50"></text></g><g><title>merkle-race`subtle::black_box (1 samples, 0.01%)</title><rect x="4.6988%" y="101" width="0.0100%" height="15" fill="rgb(206,27,48)" fg:x="468" fg:w="1"/><text x="4.7738%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="4.7189%" y="101" width="0.0100%" height="15" fill="rgb(225,35,8)" fg:x="470" fg:w="1"/><text x="4.7939%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="4.7289%" y="85" width="0.0502%" height="15" fill="rgb(250,213,24)" fg:x="471" fg:w="5"/><text x="4.8039%" y="95.50"></text></g><g><title>merkle-race`rust_incrhash::compressed_ristretto::_$LT$impl$u20$core..ops..arith..AddAssign$LT$rust_incrhash..IncrHash$LT$curve25519_dalek..ristretto..RistrettoPoint$C$digest..core_api..wrapper..CoreWrapper$LT$digest..core_api..ct_variable..CtVariableCoreWrapper$LT$blake2..Blake2bVarCore$C$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UTerm$C$typenum..bit..B1$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$GT$$GT$$GT$$GT$$u20$for$u20$rust_incrhash..IncrHash$LT$curve25519_dalek..ristretto..CompressedRistretto$C$digest..core_api..wrapper..CoreWrapper$LT$digest..core_api..ct_variable..CtVariableCoreWrapper$LT$blake2..Blake2bVarCore$C$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uintk (82 samples, 0.82%)</title><rect x="4.2570%" y="133" width="0.8233%" height="15" fill="rgb(247,123,22)" fg:x="424" fg:w="82"/><text x="4.3320%" y="143.50">me..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::compress (37 samples, 0.37%)</title><rect x="4.7088%" y="117" width="0.3715%" height="15" fill="rgb(231,138,38)" fg:x="469" fg:w="37"/><text x="4.7838%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (35 samples, 0.35%)</title><rect x="4.7289%" y="101" width="0.3514%" height="15" fill="rgb(231,145,46)" fg:x="471" fg:w="35"/><text x="4.8039%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (30 samples, 0.30%)</title><rect x="4.7791%" y="85" width="0.3012%" height="15" fill="rgb(251,118,11)" fg:x="476" fg:w="30"/><text x="4.8541%" y="95.50"></text></g><g><title>merkle-race`rust_incrhash::ristretto::_&lt;impl core::ops::arith::AddAssign for rust_incrhash::IncrHash&lt;curve25519_dalek::ristretto::RistrettoPoint,digest::core_api::wrapper::CoreWrapper&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;blake2::Blake2bVarCore,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;&gt;&gt;&gt;&gt;::add_assign (1 samples, 0.01%)</title><rect x="5.0803%" y="133" width="0.0100%" height="15" fill="rgb(217,147,25)" fg:x="506" fg:w="1"/><text x="5.1553%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="5.0803%" y="117" width="0.0100%" height="15" fill="rgb(247,81,37)" fg:x="506" fg:w="1"/><text x="5.1553%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="5.0803%" y="101" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="506" fg:w="1"/><text x="5.1553%" y="111.50"></text></g><g><title>merkle-race`&lt;merkle_race::merkle_pp::IncrementalHasher&lt;FastIncHash&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_pp::MerkleppHashValue&lt;IncHash&gt;&gt;&gt;::hash_nodes (235 samples, 2.36%)</title><rect x="2.7410%" y="149" width="2.3594%" height="15" fill="rgb(227,1,9)" fg:x="273" fg:w="235"/><text x="2.8160%" y="159.50">merkle-race..</text></g><g><title>merkle-race`rust_incrhash::ristretto::_&lt;impl core::ops::arith::SubAssign for rust_incrhash::IncrHash&lt;curve25519_dalek::ristretto::RistrettoPoint,digest::core_api::wrapper::CoreWrapper&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;blake2::Blake2bVarCore,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;&gt;&gt;&gt;&gt;::sub_assign (1 samples, 0.01%)</title><rect x="5.0904%" y="133" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="507" fg:w="1"/><text x="5.1654%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::SubAssign&gt;::sub_assign (1 samples, 0.01%)</title><rect x="5.0904%" y="117" width="0.0100%" height="15" fill="rgb(221,10,30)" fg:x="507" fg:w="1"/><text x="5.1654%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.01%)</title><rect x="5.0904%" y="101" width="0.0100%" height="15" fill="rgb(210,229,1)" fg:x="507" fg:w="1"/><text x="5.1654%" y="111.50"></text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::preprocess_leaves (250 samples, 2.51%)</title><rect x="2.6205%" y="181" width="2.5100%" height="15" fill="rgb(222,148,37)" fg:x="261" fg:w="250"/><text x="2.6955%" y="191.50">merkle-race`..</text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue (247 samples, 2.48%)</title><rect x="2.6506%" y="165" width="2.4799%" height="15" fill="rgb(234,67,33)" fg:x="264" fg:w="247"/><text x="2.7256%" y="175.50">merkle-race`..</text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child (3 samples, 0.03%)</title><rect x="5.1004%" y="149" width="0.0301%" height="15" fill="rgb(247,98,35)" fg:x="508" fg:w="3"/><text x="5.1754%" y="159.50"></text></g><g><title>merkle-race`&lt;merkle_race::merkle_pp::IncrementalHasher&lt;FastIncHash&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_pp::MerkleppHashValue&lt;IncHash&gt;&gt;&gt;::hash_nodes (1 samples, 0.01%)</title><rect x="5.1305%" y="165" width="0.0100%" height="15" fill="rgb(247,138,52)" fg:x="511" fg:w="1"/><text x="5.2055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.01%)</title><rect x="5.5020%" y="133" width="0.0100%" height="15" fill="rgb(213,79,30)" fg:x="548" fg:w="1"/><text x="5.5770%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.01%)</title><rect x="5.5120%" y="133" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="549" fg:w="1"/><text x="5.5870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="5.5422%" y="117" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="552" fg:w="1"/><text x="5.6172%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.01%)</title><rect x="5.5522%" y="69" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="553" fg:w="1"/><text x="5.6272%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="5.5622%" y="69" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="554" fg:w="1"/><text x="5.6372%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="5.5622%" y="53" width="0.0100%" height="15" fill="rgb(251,115,12)" fg:x="554" fg:w="1"/><text x="5.6372%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="5.5622%" y="37" width="0.0100%" height="15" fill="rgb(240,54,50)" fg:x="554" fg:w="1"/><text x="5.6372%" y="47.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="5.5522%" y="117" width="0.0301%" height="15" fill="rgb(233,84,52)" fg:x="553" fg:w="3"/><text x="5.6272%" y="127.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="5.5522%" y="101" width="0.0301%" height="15" fill="rgb(207,117,47)" fg:x="553" fg:w="3"/><text x="5.6272%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="5.5522%" y="85" width="0.0301%" height="15" fill="rgb(249,43,39)" fg:x="553" fg:w="3"/><text x="5.6272%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="5.5723%" y="69" width="0.0100%" height="15" fill="rgb(209,38,44)" fg:x="555" fg:w="1"/><text x="5.6473%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="5.6024%" y="85" width="0.0201%" height="15" fill="rgb(236,212,23)" fg:x="558" fg:w="2"/><text x="5.6774%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="5.5924%" y="101" width="0.0402%" height="15" fill="rgb(242,79,21)" fg:x="557" fg:w="4"/><text x="5.6674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="5.6225%" y="85" width="0.0100%" height="15" fill="rgb(211,96,35)" fg:x="560" fg:w="1"/><text x="5.6975%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="5.6225%" y="69" width="0.0100%" height="15" fill="rgb(253,215,40)" fg:x="560" fg:w="1"/><text x="5.6975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="5.6225%" y="53" width="0.0100%" height="15" fill="rgb(211,81,21)" fg:x="560" fg:w="1"/><text x="5.6975%" y="63.50"></text></g><g><title>merkle-race`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (3 samples, 0.03%)</title><rect x="5.6325%" y="101" width="0.0301%" height="15" fill="rgb(208,190,38)" fg:x="561" fg:w="3"/><text x="5.7075%" y="111.50"></text></g><g><title>merkle-race`bincode::internal::serialize (15 samples, 0.15%)</title><rect x="5.5823%" y="117" width="0.1506%" height="15" fill="rgb(235,213,38)" fg:x="556" fg:w="15"/><text x="5.6573%" y="127.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::CompressedRistretto as serde::ser::Serialize&gt;::serialize (7 samples, 0.07%)</title><rect x="5.6627%" y="101" width="0.0703%" height="15" fill="rgb(237,122,38)" fg:x="564" fg:w="7"/><text x="5.7377%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u8 (3 samples, 0.03%)</title><rect x="5.7028%" y="85" width="0.0301%" height="15" fill="rgb(244,218,35)" fg:x="568" fg:w="3"/><text x="5.7778%" y="95.50"></text></g><g><title>merkle-race`blake2::Blake2bVarCore::compress (15 samples, 0.15%)</title><rect x="5.7430%" y="101" width="0.1506%" height="15" fill="rgb(240,68,47)" fg:x="572" fg:w="15"/><text x="5.8180%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (60 samples, 0.60%)</title><rect x="5.8936%" y="85" width="0.6024%" height="15" fill="rgb(210,16,53)" fg:x="587" fg:w="60"/><text x="5.9686%" y="95.50">m..</text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="6.4960%" y="69" width="0.0502%" height="15" fill="rgb(235,124,12)" fg:x="647" fg:w="5"/><text x="6.5710%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (9 samples, 0.09%)</title><rect x="6.4960%" y="85" width="0.0904%" height="15" fill="rgb(224,169,11)" fg:x="647" fg:w="9"/><text x="6.5710%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (4 samples, 0.04%)</title><rect x="6.5462%" y="69" width="0.0402%" height="15" fill="rgb(250,166,2)" fg:x="652" fg:w="4"/><text x="6.6212%" y="79.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (6 samples, 0.06%)</title><rect x="6.5863%" y="85" width="0.0602%" height="15" fill="rgb(242,216,29)" fg:x="656" fg:w="6"/><text x="6.6613%" y="95.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (35 samples, 0.35%)</title><rect x="6.7068%" y="69" width="0.3514%" height="15" fill="rgb(230,116,27)" fg:x="668" fg:w="35"/><text x="6.7818%" y="79.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (16 samples, 0.16%)</title><rect x="7.0582%" y="69" width="0.1606%" height="15" fill="rgb(228,99,48)" fg:x="703" fg:w="16"/><text x="7.1332%" y="79.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (3 samples, 0.03%)</title><rect x="7.2189%" y="69" width="0.0301%" height="15" fill="rgb(253,11,6)" fg:x="719" fg:w="3"/><text x="7.2939%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (41 samples, 0.41%)</title><rect x="7.5502%" y="53" width="0.4116%" height="15" fill="rgb(247,143,39)" fg:x="752" fg:w="41"/><text x="7.6252%" y="63.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (878 samples, 8.82%)</title><rect x="7.9618%" y="53" width="8.8153%" height="15" fill="rgb(236,97,10)" fg:x="793" fg:w="878"/><text x="8.0368%" y="63.50">merkle-race`curve25519_dalek::backend::serial::..</text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (951 samples, 9.55%)</title><rect x="7.2490%" y="69" width="9.5482%" height="15" fill="rgb(233,208,19)" fg:x="722" fg:w="951"/><text x="7.3240%" y="79.50">merkle-race`curve25519_dalek::field::_&lt;impl curve25..</text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::pow22501 (2 samples, 0.02%)</title><rect x="16.7771%" y="53" width="0.0201%" height="15" fill="rgb(216,164,2)" fg:x="1671" fg:w="2"/><text x="16.8521%" y="63.50"></text></g><g><title>merkle-race`merkle_race::merkle_pp::hash_child (1,131 samples, 11.36%)</title><rect x="5.5221%" y="133" width="11.3554%" height="15" fill="rgb(220,129,5)" fg:x="550" fg:w="1131"/><text x="5.5971%" y="143.50">merkle-race`merkle_race::merkle_pp::hash_child</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::hash_from_bytes (1,110 samples, 11.14%)</title><rect x="5.7329%" y="117" width="11.1446%" height="15" fill="rgb(242,17,10)" fg:x="571" fg:w="1110"/><text x="5.8079%" y="127.50">merkle-race`curve25519_dalek::ristretto::RistrettoPoint::has..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::from_uniform_bytes (1,094 samples, 10.98%)</title><rect x="5.8936%" y="101" width="10.9839%" height="15" fill="rgb(242,107,0)" fg:x="587" fg:w="1094"/><text x="5.9686%" y="111.50">merkle-race`curve25519_dalek::ristretto::RistrettoPoint::fro..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::elligator_ristretto_flavor (1,019 samples, 10.23%)</title><rect x="6.6466%" y="85" width="10.2309%" height="15" fill="rgb(251,28,31)" fg:x="662" fg:w="1019"/><text x="6.7216%" y="95.50">merkle-race`curve25519_dalek::ristretto::RistrettoPoint..</text></g><g><title>merkle-race`subtle::black_box (8 samples, 0.08%)</title><rect x="16.7972%" y="69" width="0.0803%" height="15" fill="rgb(233,223,10)" fg:x="1673" fg:w="8"/><text x="16.8722%" y="79.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (10 samples, 0.10%)</title><rect x="16.8775%" y="117" width="0.1004%" height="15" fill="rgb(215,21,27)" fg:x="1681" fg:w="10"/><text x="16.9525%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.06%)</title><rect x="16.9779%" y="101" width="0.0602%" height="15" fill="rgb(232,23,21)" fg:x="1691" fg:w="6"/><text x="17.0529%" y="111.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (10 samples, 0.10%)</title><rect x="16.9779%" y="117" width="0.1004%" height="15" fill="rgb(244,5,23)" fg:x="1691" fg:w="10"/><text x="17.0529%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (4 samples, 0.04%)</title><rect x="17.0382%" y="101" width="0.0402%" height="15" fill="rgb(226,81,46)" fg:x="1697" fg:w="4"/><text x="17.1132%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (3 samples, 0.03%)</title><rect x="17.0482%" y="85" width="0.0301%" height="15" fill="rgb(247,70,30)" fg:x="1698" fg:w="3"/><text x="17.1232%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::from_bytes (1 samples, 0.01%)</title><rect x="17.0783%" y="117" width="0.0100%" height="15" fill="rgb(212,68,19)" fg:x="1701" fg:w="1"/><text x="17.1533%" y="127.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (5 samples, 0.05%)</title><rect x="17.0884%" y="117" width="0.0502%" height="15" fill="rgb(240,187,13)" fg:x="1702" fg:w="5"/><text x="17.1634%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (3 samples, 0.03%)</title><rect x="17.1386%" y="101" width="0.0301%" height="15" fill="rgb(223,113,26)" fg:x="1707" fg:w="3"/><text x="17.2136%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (3 samples, 0.03%)</title><rect x="17.1687%" y="101" width="0.0301%" height="15" fill="rgb(206,192,2)" fg:x="1710" fg:w="3"/><text x="17.2437%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (12 samples, 0.12%)</title><rect x="17.2490%" y="85" width="0.1205%" height="15" fill="rgb(241,108,4)" fg:x="1718" fg:w="12"/><text x="17.3240%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::ristretto::CompressedRistretto::decompress (203 samples, 2.04%)</title><rect x="17.1386%" y="117" width="2.0382%" height="15" fill="rgb(247,173,49)" fg:x="1707" fg:w="203"/><text x="17.2136%" y="127.50">merkle-ra..</text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (197 samples, 1.98%)</title><rect x="17.1988%" y="101" width="1.9779%" height="15" fill="rgb(224,114,35)" fg:x="1713" fg:w="197"/><text x="17.2738%" y="111.50">merkle-ra..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (180 samples, 1.81%)</title><rect x="17.3695%" y="85" width="1.8072%" height="15" fill="rgb(245,159,27)" fg:x="1730" fg:w="180"/><text x="17.4445%" y="95.50">merkle-r..</text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="19.1968%" y="101" width="0.0502%" height="15" fill="rgb(245,172,44)" fg:x="1912" fg:w="5"/><text x="19.2718%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (4 samples, 0.04%)</title><rect x="19.2470%" y="101" width="0.0402%" height="15" fill="rgb(236,23,11)" fg:x="1917" fg:w="4"/><text x="19.3220%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::to_bytes (1 samples, 0.01%)</title><rect x="19.2871%" y="101" width="0.0100%" height="15" fill="rgb(205,117,38)" fg:x="1921" fg:w="1"/><text x="19.3621%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (9 samples, 0.09%)</title><rect x="19.3474%" y="85" width="0.0904%" height="15" fill="rgb(237,72,25)" fg:x="1927" fg:w="9"/><text x="19.4224%" y="95.50"></text></g><g><title>merkle-race`curve25519_dalek::field::_&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (170 samples, 1.71%)</title><rect x="19.2972%" y="101" width="1.7068%" height="15" fill="rgb(244,70,9)" fg:x="1922" fg:w="170"/><text x="19.3722%" y="111.50">merkle-..</text></g><g><title>merkle-race`curve25519_dalek::backend::serial::u64::field::FieldElement51::pow2k (156 samples, 1.57%)</title><rect x="19.4378%" y="85" width="1.5663%" height="15" fill="rgb(217,125,39)" fg:x="1936" fg:w="156"/><text x="19.5128%" y="95.50">merkle..</text></g><g><title>merkle-race`rust_incrhash::compressed_ristretto::_$LT$impl$u20$core..ops..arith..AddAssign$LT$rust_incrhash..IncrHash$LT$curve25519_dalek..ristretto..RistrettoPoint$C$digest..core_api..wrapper..CoreWrapper$LT$digest..core_api..ct_variable..CtVariableCoreWrapper$LT$blake2..Blake2bVarCore$C$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UTerm$C$typenum..bit..B1$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$C$typenum..bit..B0$GT$$GT$$GT$$GT$$GT$$u20$for$u20$rust_incrhash..IncrHash$LT$curve25519_dalek..ristretto..CompressedRistretto$C$digest..core_api..wrapper..CoreWrapper$LT$digest..core_api..ct_variable..CtVariableCoreWrapper$LT$blake2..Blake2bVarCore$C$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uint..UInt$LT$typenum..uintk (413 samples, 4.15%)</title><rect x="16.8775%" y="133" width="4.1466%" height="15" fill="rgb(235,36,10)" fg:x="1681" fg:w="413"/><text x="16.9525%" y="143.50">merkle-race`rust_incr..</text></g><g><title>merkle-race`curve25519_dalek::ristretto::RistrettoPoint::compress (184 samples, 1.85%)</title><rect x="19.1767%" y="117" width="1.8474%" height="15" fill="rgb(251,123,47)" fg:x="1910" fg:w="184"/><text x="19.2517%" y="127.50">merkle-r..</text></g><g><title>merkle-race`subtle::black_box (2 samples, 0.02%)</title><rect x="21.0040%" y="101" width="0.0201%" height="15" fill="rgb(221,13,13)" fg:x="2092" fg:w="2"/><text x="21.0790%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (6 samples, 0.06%)</title><rect x="21.0241%" y="101" width="0.0602%" height="15" fill="rgb(238,131,9)" fg:x="2094" fg:w="6"/><text x="21.0991%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (2 samples, 0.02%)</title><rect x="21.0843%" y="85" width="0.0201%" height="15" fill="rgb(211,50,8)" fg:x="2100" fg:w="2"/><text x="21.1593%" y="95.50"></text></g><g><title>merkle-race`rust_incrhash::ristretto::_&lt;impl core::ops::arith::AddAssign for rust_incrhash::IncrHash&lt;curve25519_dalek::ristretto::RistrettoPoint,digest::core_api::wrapper::CoreWrapper&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;blake2::Blake2bVarCore,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;&gt;&gt;&gt;&gt;::add_assign (9 samples, 0.09%)</title><rect x="21.0241%" y="133" width="0.0904%" height="15" fill="rgb(245,182,24)" fg:x="2094" fg:w="9"/><text x="21.0991%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::AddAssign&gt;::add_assign (9 samples, 0.09%)</title><rect x="21.0241%" y="117" width="0.0904%" height="15" fill="rgb(242,14,37)" fg:x="2094" fg:w="9"/><text x="21.0991%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Add&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::add (3 samples, 0.03%)</title><rect x="21.0843%" y="101" width="0.0301%" height="15" fill="rgb(246,228,12)" fg:x="2100" fg:w="3"/><text x="21.1593%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (1 samples, 0.01%)</title><rect x="21.1044%" y="85" width="0.0100%" height="15" fill="rgb(213,55,15)" fg:x="2102" fg:w="1"/><text x="21.1794%" y="95.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="21.1145%" y="101" width="0.0502%" height="15" fill="rgb(209,9,3)" fg:x="2103" fg:w="5"/><text x="21.1895%" y="111.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (5 samples, 0.05%)</title><rect x="21.1948%" y="85" width="0.0502%" height="15" fill="rgb(230,59,30)" fg:x="2111" fg:w="5"/><text x="21.2698%" y="95.50"></text></g><g><title>merkle-race`&lt;merkle_race::merkle_pp::IncrementalHasher&lt;FastIncHash&gt; as merkle_race::hashing_traits::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_pp::MerkleppHashValue&lt;IncHash&gt;&gt;&gt;::hash_nodes (1,574 samples, 15.80%)</title><rect x="5.4518%" y="149" width="15.8032%" height="15" fill="rgb(209,121,21)" fg:x="543" fg:w="1574"/><text x="5.5268%" y="159.50">merkle-race`&lt;merkle_race::merkle_pp::IncrementalHasher&lt;FastIncHash&gt; as merkle_race::has..</text></g><g><title>merkle-race`rust_incrhash::ristretto::_&lt;impl core::ops::arith::SubAssign for rust_incrhash::IncrHash&lt;curve25519_dalek::ristretto::RistrettoPoint,digest::core_api::wrapper::CoreWrapper&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;blake2::Blake2bVarCore,typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;,typenum::bit::B0&gt;&gt;&gt;&gt;&gt;::sub_assign (14 samples, 0.14%)</title><rect x="21.1145%" y="133" width="0.1406%" height="15" fill="rgb(220,109,13)" fg:x="2103" fg:w="14"/><text x="21.1895%" y="143.50"></text></g><g><title>merkle-race`&lt;curve25519_dalek::ristretto::RistrettoPoint as core::ops::arith::SubAssign&gt;::sub_assign (14 samples, 0.14%)</title><rect x="21.1145%" y="117" width="0.1406%" height="15" fill="rgb(232,18,1)" fg:x="2103" fg:w="14"/><text x="21.1895%" y="127.50"></text></g><g><title>merkle-race`&lt;&amp;curve25519_dalek::edwards::EdwardsPoint as core::ops::arith::Sub&lt;&amp;curve25519_dalek::edwards::EdwardsPoint&gt;&gt;::sub (9 samples, 0.09%)</title><rect x="21.1647%" y="101" width="0.0904%" height="15" fill="rgb(215,41,42)" fg:x="2108" fg:w="9"/><text x="21.2397%" y="111.50"></text></g><g><title>merkle-race`curve25519_dalek::backend::serial::curve_models::_&lt;impl core::ops::arith::Sub&lt;&amp;curve25519_dalek::backend::serial::curve_models::ProjectiveNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::sub (1 samples, 0.01%)</title><rect x="21.2450%" y="85" width="0.0100%" height="15" fill="rgb(224,123,36)" fg:x="2116" fg:w="1"/><text x="21.3200%" y="95.50"></text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child (5 samples, 0.05%)</title><rect x="21.2550%" y="149" width="0.0502%" height="15" fill="rgb(240,125,3)" fg:x="2117" fg:w="5"/><text x="21.3300%" y="159.50"></text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::update_preprocessed_leaves (1,612 samples, 16.18%)</title><rect x="5.1305%" y="181" width="16.1847%" height="15" fill="rgb(205,98,50)" fg:x="511" fg:w="1612"/><text x="5.2055%" y="191.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::u..</text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue (1,611 samples, 16.17%)</title><rect x="5.1406%" y="165" width="16.1747%" height="15" fill="rgb(205,185,37)" fg:x="512" fg:w="1611"/><text x="5.2156%" y="175.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_..</text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child_offset (1 samples, 0.01%)</title><rect x="21.3052%" y="149" width="0.0100%" height="15" fill="rgb(238,207,15)" fg:x="2122" fg:w="1"/><text x="21.3802%" y="159.50"></text></g><g><title>merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_num_leaves (1,681 samples, 16.88%)</title><rect x="21.3153%" y="181" width="16.8775%" height="15" fill="rgb(213,199,42)" fg:x="2123" fg:w="1681"/><text x="21.3903%" y="191.50">merkle-race`merkle_race::merkle_abstract::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_..</text></g><g><title>merkle-race`alloc::vec::from_elem (1,681 samples, 16.88%)</title><rect x="21.3153%" y="165" width="16.8775%" height="15" fill="rgb(235,201,11)" fg:x="2123" fg:w="1681"/><text x="21.3903%" y="175.50">merkle-race`alloc::vec::from_elem</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.01%)</title><rect x="38.1928%" y="133" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="3804" fg:w="1"/><text x="38.2678%" y="143.50"></text></g><g><title>merkle-race`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="38.1928%" y="165" width="0.0201%" height="15" fill="rgb(241,35,35)" fg:x="3804" fg:w="2"/><text x="38.2678%" y="175.50"></text></g><g><title>merkle-race`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="38.1928%" y="149" width="0.0201%" height="15" fill="rgb(243,32,47)" fg:x="3804" fg:w="2"/><text x="38.2678%" y="159.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="38.2028%" y="133" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="143.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="38.2028%" y="117" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="38.2028%" y="101" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="38.2028%" y="85" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="38.2028%" y="69" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="38.2028%" y="53" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="38.2028%" y="37" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="3805" fg:w="1"/><text x="38.2778%" y="47.50"></text></g><g><title>merkle-race`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="38.2129%" y="165" width="0.0100%" height="15" fill="rgb(213,25,53)" fg:x="3806" fg:w="1"/><text x="38.2879%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="38.2129%" y="149" width="0.0100%" height="15" fill="rgb(252,105,26)" fg:x="3806" fg:w="1"/><text x="38.2879%" y="159.50"></text></g><g><title>merkle-race`alloc::slice::merge_sort (1 samples, 0.01%)</title><rect x="38.2229%" y="149" width="0.0100%" height="15" fill="rgb(220,39,43)" fg:x="3807" fg:w="1"/><text x="38.2979%" y="159.50"></text></g><g><title>merkle-race`rand::rng::Rng::gen_range (409 samples, 4.11%)</title><rect x="38.2329%" y="149" width="4.1064%" height="15" fill="rgb(229,68,48)" fg:x="3808" fg:w="409"/><text x="38.3079%" y="159.50">merkle-race`rand::rng..</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3,115 samples, 31.28%)</title><rect x="46.0241%" y="133" width="31.2751%" height="15" fill="rgb(252,8,32)" fg:x="4584" fg:w="3115"/><text x="46.0991%" y="143.50">merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (11 samples, 0.11%)</title><rect x="99.4880%" y="117" width="0.1104%" height="15" fill="rgb(223,20,43)" fg:x="9909" fg:w="11"/><text x="99.5630%" y="127.50"></text></g><g><title>dyld`start (9,959 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9900%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="287.50">dyld`start</text></g><g><title>merkle-race`main (9,959 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9900%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="271.50">merkle-race`main</text></g><g><title>merkle-race`std::rt::lang_start_internal (9,959 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9900%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="255.50">merkle-race`std::rt::lang_start_internal</text></g><g><title>merkle-race`std::rt::lang_start::_{{closure}} (9,959 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9900%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="239.50">merkle-race`std::rt::lang_start::_{{closure}}</text></g><g><title>merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace (9,959 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9900%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="223.50">merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>merkle-race`merkle_race::main (9,959 samples, 99.99%)</title><rect x="0.0000%" y="197" width="99.9900%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="9959"/><text x="0.0750%" y="207.50">merkle-race`merkle_race::main</text></g><g><title>merkle-race`merkle_race::random_updates (6,155 samples, 61.80%)</title><rect x="38.1928%" y="181" width="61.7972%" height="15" fill="rgb(250,127,30)" fg:x="3804" fg:w="6155"/><text x="38.2678%" y="191.50">merkle-race`merkle_race::random_updates</text></g><g><title>merkle-race`merkle_race::random_leaf_positions (6,152 samples, 61.77%)</title><rect x="38.2229%" y="165" width="61.7671%" height="15" fill="rgb(230,49,44)" fg:x="3807" fg:w="6152"/><text x="38.2979%" y="175.50">merkle-race`merkle_race::random_leaf_positions</text></g><g><title>merkle-race`rand::seq::IteratorRandom::choose_multiple (5,742 samples, 57.65%)</title><rect x="42.3394%" y="149" width="57.6506%" height="15" fill="rgb(229,67,23)" fg:x="4217" fg:w="5742"/><text x="42.4144%" y="159.50">merkle-race`rand::seq::IteratorRandom::choose_multiple</text></g><g><title>merkle-race`rand::rng::Rng::gen_range (2,260 samples, 22.69%)</title><rect x="77.2992%" y="133" width="22.6908%" height="15" fill="rgb(249,83,47)" fg:x="7699" fg:w="2260"/><text x="77.3742%" y="143.50">merkle-race`rand::rng::Rng::gen_range</text></g><g><title>merkle-race`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (39 samples, 0.39%)</title><rect x="99.5984%" y="117" width="0.3916%" height="15" fill="rgb(215,43,3)" fg:x="9920" fg:w="39"/><text x="99.6734%" y="127.50"></text></g><g><title>merkle-race`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (39 samples, 0.39%)</title><rect x="99.5984%" y="101" width="0.3916%" height="15" fill="rgb(238,154,13)" fg:x="9920" fg:w="39"/><text x="99.6734%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (39 samples, 0.39%)</title><rect x="99.5984%" y="85" width="0.3916%" height="15" fill="rgb(219,56,2)" fg:x="9920" fg:w="39"/><text x="99.6734%" y="95.50"></text></g><g><title>all (9,960 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="9960"/><text x="0.0750%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.01%)</title><rect x="99.9900%" y="277" width="0.0100%" height="15" fill="rgb(235,30,7)" fg:x="9959" fg:w="1"/><text x="100.0650%" y="287.50"></text></g></svg></svg>