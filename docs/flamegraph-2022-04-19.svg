<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="4000" height="294" onload="init(evt)" viewBox="0 0 4000 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="3890" y="24.00">Search</text><text id="matched" x="3890" y="277.00"> </text><svg id="frames" x="10" width="3980" total_samples="27910"><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.01%)</title><rect x="0.0143%" y="133" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="3"/><text x="0.0893%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.03%)</title><rect x="0.0251%" y="133" width="0.0287%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="8"/><text x="0.1001%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (225 samples, 0.81%)</title><rect x="0.0537%" y="133" width="0.8062%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="225"/><text x="0.1287%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (225 samples, 0.81%)</title><rect x="0.0537%" y="117" width="0.8062%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="225"/><text x="0.1287%" y="127.50">li..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (225 samples, 0.81%)</title><rect x="0.0537%" y="101" width="0.8062%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="225"/><text x="0.1287%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.02%)</title><rect x="0.8599%" y="133" width="0.0215%" height="15" fill="rgb(232,128,0)" fg:x="240" fg:w="6"/><text x="0.9349%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.01%)</title><rect x="0.8814%" y="133" width="0.0143%" height="15" fill="rgb(207,160,47)" fg:x="246" fg:w="4"/><text x="0.9564%" y="143.50"></text></g><g><title>merkle-race`&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="0.8957%" y="133" width="0.0143%" height="15" fill="rgb(228,23,34)" fg:x="250" fg:w="4"/><text x="0.9707%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.04%)</title><rect x="0.9781%" y="117" width="0.0430%" height="15" fill="rgb(218,30,26)" fg:x="273" fg:w="12"/><text x="1.0531%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.02%)</title><rect x="1.1250%" y="85" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="314" fg:w="6"/><text x="1.2000%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.02%)</title><rect x="1.3257%" y="53" width="0.0215%" height="15" fill="rgb(250,228,42)" fg:x="370" fg:w="6"/><text x="1.4007%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (66 samples, 0.24%)</title><rect x="1.1609%" y="69" width="0.2365%" height="15" fill="rgb(240,193,28)" fg:x="324" fg:w="66"/><text x="1.2359%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (14 samples, 0.05%)</title><rect x="1.3472%" y="53" width="0.0502%" height="15" fill="rgb(216,20,37)" fg:x="376" fg:w="14"/><text x="1.4222%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (101 samples, 0.36%)</title><rect x="1.0534%" y="101" width="0.3619%" height="15" fill="rgb(206,188,39)" fg:x="294" fg:w="101"/><text x="1.1284%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (75 samples, 0.27%)</title><rect x="1.1465%" y="85" width="0.2687%" height="15" fill="rgb(217,207,13)" fg:x="320" fg:w="75"/><text x="1.2215%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="1.3973%" y="69" width="0.0179%" height="15" fill="rgb(231,73,38)" fg:x="390" fg:w="5"/><text x="1.4723%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="1.4153%" y="101" width="0.0107%" height="15" fill="rgb(225,20,46)" fg:x="395" fg:w="3"/><text x="1.4903%" y="111.50"></text></g><g><title>merkle-race`&lt;alloc::string::String as core::clone::Clone&gt;::clone (114 samples, 0.41%)</title><rect x="1.0211%" y="117" width="0.4085%" height="15" fill="rgb(210,31,41)" fg:x="285" fg:w="114"/><text x="1.0961%" y="127.50"></text></g><g><title>merkle-race`DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="1.4296%" y="117" width="0.0215%" height="15" fill="rgb(221,200,47)" fg:x="399" fg:w="6"/><text x="1.5046%" y="127.50"></text></g><g><title>merkle-race`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (155 samples, 0.56%)</title><rect x="0.9101%" y="133" width="0.5554%" height="15" fill="rgb(226,26,5)" fg:x="254" fg:w="155"/><text x="0.9851%" y="143.50">m..</text></g><g><title>merkle-race`__rdl_alloc (3 samples, 0.01%)</title><rect x="1.4547%" y="117" width="0.0107%" height="15" fill="rgb(249,33,26)" fg:x="406" fg:w="3"/><text x="1.5297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.15%)</title><rect x="1.4905%" y="117" width="0.1541%" height="15" fill="rgb(235,183,28)" fg:x="416" fg:w="43"/><text x="1.5655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.04%)</title><rect x="1.6052%" y="101" width="0.0394%" height="15" fill="rgb(221,5,38)" fg:x="448" fg:w="11"/><text x="1.6802%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (56 samples, 0.20%)</title><rect x="1.6517%" y="117" width="0.2006%" height="15" fill="rgb(247,18,42)" fg:x="461" fg:w="56"/><text x="1.7267%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (36 samples, 0.13%)</title><rect x="1.7234%" y="101" width="0.1290%" height="15" fill="rgb(241,131,45)" fg:x="481" fg:w="36"/><text x="1.7984%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.13%)</title><rect x="1.7234%" y="85" width="0.1290%" height="15" fill="rgb(249,31,29)" fg:x="481" fg:w="36"/><text x="1.7984%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.03%)</title><rect x="1.8595%" y="117" width="0.0251%" height="15" fill="rgb(225,111,53)" fg:x="519" fg:w="7"/><text x="1.9345%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.01%)</title><rect x="1.9276%" y="101" width="0.0143%" height="15" fill="rgb(238,160,17)" fg:x="538" fg:w="4"/><text x="2.0026%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="1.9420%" y="101" width="0.0107%" height="15" fill="rgb(214,148,48)" fg:x="542" fg:w="3"/><text x="2.0170%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="1.9527%" y="101" width="0.0179%" height="15" fill="rgb(232,36,49)" fg:x="545" fg:w="5"/><text x="2.0277%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.02%)</title><rect x="1.9706%" y="101" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="550" fg:w="6"/><text x="2.0456%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="2.0387%" y="69" width="0.0179%" height="15" fill="rgb(229,88,8)" fg:x="569" fg:w="5"/><text x="2.1137%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.10%)</title><rect x="2.0889%" y="53" width="0.1039%" height="15" fill="rgb(213,181,19)" fg:x="583" fg:w="29"/><text x="2.1639%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.04%)</title><rect x="2.1569%" y="37" width="0.0358%" height="15" fill="rgb(254,191,54)" fg:x="602" fg:w="10"/><text x="2.2319%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.21%)</title><rect x="1.9921%" y="85" width="0.2114%" height="15" fill="rgb(241,83,37)" fg:x="556" fg:w="59"/><text x="2.0671%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.15%)</title><rect x="2.0566%" y="69" width="0.1469%" height="15" fill="rgb(233,36,39)" fg:x="574" fg:w="41"/><text x="2.1316%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="2.1928%" y="53" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="612" fg:w="3"/><text x="2.2678%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="2.2035%" y="85" width="0.0179%" height="15" fill="rgb(245,192,40)" fg:x="615" fg:w="5"/><text x="2.2785%" y="95.50"></text></g><g><title>merkle-race`&lt;alloc::string::String as core::clone::Clone&gt;::clone (65 samples, 0.23%)</title><rect x="1.9921%" y="101" width="0.2329%" height="15" fill="rgb(238,167,29)" fg:x="556" fg:w="65"/><text x="2.0671%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.10%)</title><rect x="2.3038%" y="85" width="0.1039%" height="15" fill="rgb(232,182,51)" fg:x="643" fg:w="29"/><text x="2.3788%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.04%)</title><rect x="2.3683%" y="69" width="0.0394%" height="15" fill="rgb(231,60,39)" fg:x="661" fg:w="11"/><text x="2.4433%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.06%)</title><rect x="2.4113%" y="85" width="0.0573%" height="15" fill="rgb(208,69,12)" fg:x="673" fg:w="16"/><text x="2.4863%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.03%)</title><rect x="2.4686%" y="85" width="0.0251%" height="15" fill="rgb(235,93,37)" fg:x="689" fg:w="7"/><text x="2.5436%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.03%)</title><rect x="2.5439%" y="69" width="0.0322%" height="15" fill="rgb(213,116,39)" fg:x="710" fg:w="9"/><text x="2.6189%" y="79.50"></text></g><g><title>merkle-race`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="2.5761%" y="69" width="0.0179%" height="15" fill="rgb(222,207,29)" fg:x="719" fg:w="5"/><text x="2.6511%" y="79.50"></text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::finalize (14 samples, 0.05%)</title><rect x="2.5941%" y="69" width="0.0502%" height="15" fill="rgb(206,96,30)" fg:x="724" fg:w="14"/><text x="2.6691%" y="79.50"></text></g><g><title>merkle-race`&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (1,345 samples, 4.82%)</title><rect x="2.4937%" y="85" width="4.8191%" height="15" fill="rgb(218,138,4)" fg:x="696" fg:w="1345"/><text x="2.5687%" y="95.50">merkle-race`&lt;tiny_keccak:..</text></g><g><title>merkle-race`tiny_keccak::keccakf::keccakf (1,303 samples, 4.67%)</title><rect x="2.6442%" y="69" width="4.6686%" height="15" fill="rgb(250,191,14)" fg:x="738" fg:w="1303"/><text x="2.7192%" y="79.50">merkle-race`tiny_keccak:..</text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::finalize (9 samples, 0.03%)</title><rect x="7.3128%" y="85" width="0.0322%" height="15" fill="rgb(239,60,40)" fg:x="2041" fg:w="9"/><text x="7.3878%" y="95.50"></text></g><g><title>merkle-race`&lt;merkle_race::merkle_crhf::HasherSha3 as merkle_race::tree_hasher::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_crhf::MerkleHashValue&gt;&gt;::hash_leaf_data (1,485 samples, 5.32%)</title><rect x="2.2250%" y="101" width="5.3207%" height="15" fill="rgb(206,27,48)" fg:x="621" fg:w="1485"/><text x="2.3000%" y="111.50">merkle-race`&lt;merkle_race::me..</text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::update (56 samples, 0.20%)</title><rect x="7.3450%" y="85" width="0.2006%" height="15" fill="rgb(225,35,8)" fg:x="2050" fg:w="56"/><text x="7.4200%" y="95.50"></text></g><g><title>merkle-race`&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (6 samples, 0.02%)</title><rect x="7.5457%" y="101" width="0.0215%" height="15" fill="rgb(250,213,24)" fg:x="2106" fg:w="6"/><text x="7.6207%" y="111.50"></text></g><g><title>merkle-race`__rdl_alloc (3 samples, 0.01%)</title><rect x="7.5743%" y="101" width="0.0107%" height="15" fill="rgb(247,123,22)" fg:x="2114" fg:w="3"/><text x="7.6493%" y="111.50"></text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::update (9 samples, 0.03%)</title><rect x="7.5923%" y="101" width="0.0322%" height="15" fill="rgb(231,138,38)" fg:x="2119" fg:w="9"/><text x="7.6673%" y="111.50"></text></g><g><title>merkle-race`&lt;alloc::collections::vec_deque::VecDeque&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,611 samples, 5.77%)</title><rect x="1.8846%" y="117" width="5.7721%" height="15" fill="rgb(231,145,46)" fg:x="526" fg:w="1611"/><text x="1.9596%" y="127.50">merkle-race`&lt;alloc::collection..</text></g><g><title>merkle-race`tiny_keccak::sha3::Sha3::v256 (9 samples, 0.03%)</title><rect x="7.6245%" y="101" width="0.0322%" height="15" fill="rgb(251,118,11)" fg:x="2128" fg:w="9"/><text x="7.6995%" y="111.50"></text></g><g><title>merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::preprocess_leaves (1,728 samples, 6.19%)</title><rect x="1.4726%" y="133" width="6.1913%" height="15" fill="rgb(217,147,25)" fg:x="411" fg:w="1728"/><text x="1.5476%" y="143.50">merkle-race`merkle_race::merkle:..</text></g><g><title>merkle-race`&lt;merkle_race::merkle_crhf::HasherSha3 as merkle_race::tree_hasher::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_crhf::MerkleHashValue&gt;&gt;::hash_nodes (92 samples, 0.33%)</title><rect x="7.6639%" y="117" width="0.3296%" height="15" fill="rgb(247,81,37)" fg:x="2139" fg:w="92"/><text x="7.7389%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (125 samples, 0.45%)</title><rect x="25.8474%" y="69" width="0.4479%" height="15" fill="rgb(209,12,38)" fg:x="7214" fg:w="125"/><text x="25.9224%" y="79.50"></text></g><g><title>merkle-race`DYLD-STUB$$memcpy (28 samples, 0.10%)</title><rect x="26.2952%" y="69" width="0.1003%" height="15" fill="rgb(227,1,9)" fg:x="7339" fg:w="28"/><text x="26.3702%" y="79.50"></text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::finalize (316 samples, 1.13%)</title><rect x="26.3956%" y="69" width="1.1322%" height="15" fill="rgb(248,47,43)" fg:x="7367" fg:w="316"/><text x="26.4706%" y="79.50">merk..</text></g><g><title>merkle-race`&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (18,299 samples, 65.56%)</title><rect x="12.1641%" y="85" width="65.5643%" height="15" fill="rgb(221,10,30)" fg:x="3395" fg:w="18299"/><text x="12.2391%" y="95.50">merkle-race`&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize</text></g><g><title>merkle-race`tiny_keccak::keccakf::keccakf (14,011 samples, 50.20%)</title><rect x="27.5278%" y="69" width="50.2006%" height="15" fill="rgb(210,229,1)" fg:x="7683" fg:w="14011"/><text x="27.6028%" y="79.50">merkle-race`tiny_keccak::keccakf::keccakf</text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::finalize (227 samples, 0.81%)</title><rect x="77.7284%" y="85" width="0.8133%" height="15" fill="rgb(222,148,37)" fg:x="21694" fg:w="227"/><text x="77.8034%" y="95.50">me..</text></g><g><title>merkle-race`&lt;merkle_race::merkle_crhf::HasherSha3 as merkle_race::tree_hasher::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_crhf::MerkleHashValue&gt;&gt;::hash_nodes (19,386 samples, 69.46%)</title><rect x="10.8563%" y="101" width="69.4590%" height="15" fill="rgb(234,67,33)" fg:x="3030" fg:w="19386"/><text x="10.9313%" y="111.50">merkle-race`&lt;merkle_race::merkle_crhf::HasherSha3 as merkle_race::tree_hasher::TreeHasherFunc&lt;alloc::string::String,merkle_race::merkle_crhf::MerkleHashValue&gt;&gt;::hash_nodes</text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::update (495 samples, 1.77%)</title><rect x="78.5417%" y="85" width="1.7736%" height="15" fill="rgb(247,98,35)" fg:x="21921" fg:w="495"/><text x="78.6167%" y="95.50">merkle-r..</text></g><g><title>merkle-race`&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (102 samples, 0.37%)</title><rect x="80.3153%" y="101" width="0.3655%" height="15" fill="rgb(247,138,52)" fg:x="22416" fg:w="102"/><text x="80.3903%" y="111.50"></text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child (132 samples, 0.47%)</title><rect x="80.6808%" y="101" width="0.4729%" height="15" fill="rgb(213,79,30)" fg:x="22518" fg:w="132"/><text x="80.7558%" y="111.50"></text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::child_offset (41 samples, 0.15%)</title><rect x="81.1537%" y="101" width="0.1469%" height="15" fill="rgb(246,177,23)" fg:x="22650" fg:w="41"/><text x="81.2287%" y="111.50"></text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::parent (73 samples, 0.26%)</title><rect x="81.3006%" y="101" width="0.2616%" height="15" fill="rgb(230,62,27)" fg:x="22691" fg:w="73"/><text x="81.3756%" y="111.50"></text></g><g><title>merkle-race`tiny_keccak::KeccakState&lt;P&gt;::update (122 samples, 0.44%)</title><rect x="81.5622%" y="101" width="0.4371%" height="15" fill="rgb(216,154,8)" fg:x="22764" fg:w="122"/><text x="81.6372%" y="111.50"></text></g><g><title>merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue (20,723 samples, 74.25%)</title><rect x="7.9936%" y="117" width="74.2494%" height="15" fill="rgb(244,35,45)" fg:x="2231" fg:w="20723"/><text x="8.0686%" y="127.50">merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::_process_update_queue</text></g><g><title>merkle-race`tiny_keccak::sha3::Sha3::v256 (68 samples, 0.24%)</title><rect x="81.9993%" y="101" width="0.2436%" height="15" fill="rgb(251,115,12)" fg:x="22886" fg:w="68"/><text x="82.0743%" y="111.50"></text></g><g><title>merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::update_preprocessed_leaves (20,866 samples, 74.76%)</title><rect x="7.6639%" y="133" width="74.7617%" height="15" fill="rgb(240,54,50)" fg:x="2139" fg:w="20866"/><text x="7.7389%" y="143.50">merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::update_preprocessed_leaves</text></g><g><title>merkle-race`merkle_race::node_index::NodeIndex::is_root (50 samples, 0.18%)</title><rect x="82.2465%" y="117" width="0.1791%" height="15" fill="rgb(233,84,52)" fg:x="22955" fg:w="50"/><text x="82.3215%" y="127.50"></text></g><g><title>merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_num_leaves (29 samples, 0.10%)</title><rect x="82.4257%" y="133" width="0.1039%" height="15" fill="rgb(207,117,47)" fg:x="23005" fg:w="29"/><text x="82.5007%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.02%)</title><rect x="82.5511%" y="37" width="0.0215%" height="15" fill="rgb(249,43,39)" fg:x="23040" fg:w="6"/><text x="82.6261%" y="47.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.04%)</title><rect x="82.5439%" y="85" width="0.0358%" height="15" fill="rgb(209,38,44)" fg:x="23038" fg:w="10"/><text x="82.6189%" y="95.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (10 samples, 0.04%)</title><rect x="82.5439%" y="69" width="0.0358%" height="15" fill="rgb(236,212,23)" fg:x="23038" fg:w="10"/><text x="82.6189%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.03%)</title><rect x="82.5475%" y="53" width="0.0322%" height="15" fill="rgb(242,79,21)" fg:x="23039" fg:w="9"/><text x="82.6225%" y="63.50"></text></g><g><title>merkle-race`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.07%)</title><rect x="82.5296%" y="101" width="0.0681%" height="15" fill="rgb(211,96,35)" fg:x="23034" fg:w="19"/><text x="82.6046%" y="111.50"></text></g><g><title>merkle-race`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (4 samples, 0.01%)</title><rect x="82.5833%" y="85" width="0.0143%" height="15" fill="rgb(253,215,40)" fg:x="23049" fg:w="4"/><text x="82.6583%" y="95.50"></text></g><g><title>merkle-race`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="82.5869%" y="69" width="0.0107%" height="15" fill="rgb(211,81,21)" fg:x="23050" fg:w="3"/><text x="82.6619%" y="79.50"></text></g><g><title>merkle-race`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="82.5869%" y="53" width="0.0107%" height="15" fill="rgb(208,190,38)" fg:x="23050" fg:w="3"/><text x="82.6619%" y="63.50"></text></g><g><title>merkle-race`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="82.5869%" y="37" width="0.0107%" height="15" fill="rgb(235,213,38)" fg:x="23050" fg:w="3"/><text x="82.6619%" y="47.50"></text></g><g><title>merkle-race`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.08%)</title><rect x="82.5296%" y="117" width="0.0752%" height="15" fill="rgb(237,122,38)" fg:x="23034" fg:w="21"/><text x="82.6046%" y="127.50"></text></g><g><title>merkle-race`alloc::slice::merge_sort (9 samples, 0.03%)</title><rect x="82.6120%" y="101" width="0.0322%" height="15" fill="rgb(244,218,35)" fg:x="23057" fg:w="9"/><text x="82.6870%" y="111.50"></text></g><g><title>merkle-race`rand::rng::Rng::gen_range (262 samples, 0.94%)</title><rect x="82.6442%" y="101" width="0.9387%" height="15" fill="rgb(240,68,47)" fg:x="23066" fg:w="262"/><text x="82.7192%" y="111.50">mer..</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1,763 samples, 6.32%)</title><rect x="84.2924%" y="85" width="6.3167%" height="15" fill="rgb(210,16,53)" fg:x="23526" fg:w="1763"/><text x="84.3674%" y="95.50">merkle-race`&lt;rand_chacha::chacha:..</text></g><g><title>merkle-race`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.03%)</title><rect x="94.6041%" y="69" width="0.0287%" height="15" fill="rgb(235,124,12)" fg:x="26404" fg:w="8"/><text x="94.6791%" y="79.50"></text></g><g><title>merkle-race`rand::rng::Rng::gen_range (1,135 samples, 4.07%)</title><rect x="90.6091%" y="85" width="4.0666%" height="15" fill="rgb(224,169,11)" fg:x="25289" fg:w="1135"/><text x="90.6841%" y="95.50">merkle-race`rand::rn..</text></g><g><title>merkle-race`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (12 samples, 0.04%)</title><rect x="94.6327%" y="69" width="0.0430%" height="15" fill="rgb(250,166,2)" fg:x="26412" fg:w="12"/><text x="94.7077%" y="79.50"></text></g><g><title>merkle-race`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (12 samples, 0.04%)</title><rect x="94.6327%" y="53" width="0.0430%" height="15" fill="rgb(242,216,29)" fg:x="26412" fg:w="12"/><text x="94.7077%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (12 samples, 0.04%)</title><rect x="94.6327%" y="37" width="0.0430%" height="15" fill="rgb(230,116,27)" fg:x="26412" fg:w="12"/><text x="94.7077%" y="47.50"></text></g><g><title>dyld`start (26,429 samples, 94.69%)</title><rect x="0.0000%" y="229" width="94.6937%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="26429"/><text x="0.0750%" y="239.50">dyld`start</text></g><g><title>merkle-race`main (26,428 samples, 94.69%)</title><rect x="0.0036%" y="213" width="94.6901%" height="15" fill="rgb(253,11,6)" fg:x="1" fg:w="26428"/><text x="0.0786%" y="223.50">merkle-race`main</text></g><g><title>merkle-race`std::rt::lang_start_internal (26,427 samples, 94.69%)</title><rect x="0.0072%" y="197" width="94.6865%" height="15" fill="rgb(247,143,39)" fg:x="2" fg:w="26427"/><text x="0.0822%" y="207.50">merkle-race`std::rt::lang_start_internal</text></g><g><title>merkle-race`std::rt::lang_start::_{{closure}} (26,427 samples, 94.69%)</title><rect x="0.0072%" y="181" width="94.6865%" height="15" fill="rgb(236,97,10)" fg:x="2" fg:w="26427"/><text x="0.0822%" y="191.50">merkle-race`std::rt::lang_start::_{{closure}}</text></g><g><title>merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace (26,427 samples, 94.69%)</title><rect x="0.0072%" y="165" width="94.6865%" height="15" fill="rgb(233,208,19)" fg:x="2" fg:w="26427"/><text x="0.0822%" y="175.50">merkle-race`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>merkle-race`merkle_race::main (26,426 samples, 94.68%)</title><rect x="0.0107%" y="149" width="94.6829%" height="15" fill="rgb(216,164,2)" fg:x="3" fg:w="26426"/><text x="0.0857%" y="159.50">merkle-race`merkle_race::main</text></g><g><title>merkle-race`merkle_race::random_updates (3,395 samples, 12.16%)</title><rect x="82.5296%" y="133" width="12.1641%" height="15" fill="rgb(220,129,5)" fg:x="23034" fg:w="3395"/><text x="82.6046%" y="143.50">merkle-race`merkle_race::random_updates</text></g><g><title>merkle-race`merkle_race::random_leaf_positions (3,373 samples, 12.09%)</title><rect x="82.6084%" y="117" width="12.0853%" height="15" fill="rgb(242,17,10)" fg:x="23056" fg:w="3373"/><text x="82.6834%" y="127.50">merkle-race`merkle_race::random_leaf_positions</text></g><g><title>merkle-race`rand::seq::IteratorRandom::choose_multiple (3,101 samples, 11.11%)</title><rect x="83.5829%" y="101" width="11.1107%" height="15" fill="rgb(242,107,0)" fg:x="23328" fg:w="3101"/><text x="83.6579%" y="111.50">merkle-race`rand::seq::IteratorRandom::choose_multiple</text></g><g><title>merkle-race`rand::rngs::adapter::reseeding::fork::get_fork_counter (5 samples, 0.02%)</title><rect x="94.6757%" y="85" width="0.0179%" height="15" fill="rgb(251,28,31)" fg:x="26424" fg:w="5"/><text x="94.7507%" y="95.50"></text></g><g><title>all (27,910 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="27910"/><text x="0.0750%" y="255.50"></text></g><g><title>merkle-race`merkle_race::merkle::AbstractMerkle&lt;LeafDataType,HashType,Hasher&gt;::with_num_leaves (1,480 samples, 5.30%)</title><rect x="94.6972%" y="229" width="5.3028%" height="15" fill="rgb(215,21,27)" fg:x="26430" fg:w="1480"/><text x="94.7722%" y="239.50">merkle-race`merkle_race::me..</text></g></svg></svg>